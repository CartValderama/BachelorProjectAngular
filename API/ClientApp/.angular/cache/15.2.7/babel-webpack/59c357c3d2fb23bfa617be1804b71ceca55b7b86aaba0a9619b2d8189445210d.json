{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/elija/source/repos/BachelorProject/API/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/flashcard.service\";\nimport * as i3 from \"../services/deck.service\";\nimport * as i4 from \"@angular/common\";\nfunction FlashcardthreeComponent_div_40_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 33)(2, \"div\", 34)(3, \"div\", 35)(4, \"div\", 36)(5, \"p\", 37);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 38);\n    i0.ɵɵelement(8, \"textarea\", 39)(9, \"p\", 40);\n    i0.ɵɵelementStart(10, \"button\", 41);\n    i0.ɵɵlistener(\"click\", function FlashcardthreeComponent_div_40_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const flashcard_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.getBack(flashcard_r1.FlashcardId));\n    });\n    i0.ɵɵelementStart(11, \"div\", 42);\n    i0.ɵɵelement(12, \"span\", 43);\n    i0.ɵɵelementStart(13, \"span\", 44);\n    i0.ɵɵtext(14, \"Loading...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(15, \"i\", 45);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(16, \"p\", 37);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"div\", 46)(18, \"div\", 47)(19, \"h2\", 48);\n    i0.ɵɵtext(20, \"Instructions\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(21, \"div\")(22, \"ul\")(23, \"li\");\n    i0.ɵɵtext(24, \"The flashcard's fronts and backs should make sense for GPT to help.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"li\");\n    i0.ɵɵtext(26, \"For each flashcard, read the front and input your back in the provided text box.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"li\");\n    i0.ɵɵtext(28, \"Click the \\\"Submit\\\" button to get feedback from GPT.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"li\");\n    i0.ɵɵtext(30, \"GPT will provide an explanation and rating for your back.\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(31, \"li\");\n    i0.ɵɵtext(32, \"Please wait patiently while GPT reviews your back.\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(33, \"div\", 49)(34, \"div\", 50)(35, \"span\", 44);\n    i0.ɵɵtext(36, \"Loading...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(37, \"div\", 51)(38, \"span\", 44);\n    i0.ɵɵtext(39, \"Loading...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(40, \"div\", 52)(41, \"span\", 44);\n    i0.ɵɵtext(42, \"Loading...\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(43, \"div\", 53)(44, \"span\", 44);\n    i0.ɵɵtext(45, \"Loading...\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(46, \"div\", 54)(47, \"div\", 55)(48, \"p\", 56);\n    i0.ɵɵtext(49, \"Flashcard's Back:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(50, \"p\", 4);\n    i0.ɵɵtext(51);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(52, \"div\", 57)(53, \"p\", 56);\n    i0.ɵɵtext(54, \"GPT explanation:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(55, \"p\", 58);\n    i0.ɵɵtext(56, \"ChatGPT Rating and Suggestion\");\n    i0.ɵɵelementEnd()()()()()()();\n  }\n  if (rf & 2) {\n    const flashcard_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"id\", \"rating_\" + flashcard_r1.FlashcardId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"id\", \"front_\" + flashcard_r1.FlashcardId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(flashcard_r1.Front);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"id\", \"text_\" + flashcard_r1.FlashcardId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"error_\" + flashcard_r1.FlashcardId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"submit_\" + flashcard_r1.FlashcardId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"status_\" + flashcard_r1.FlashcardId);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"id\", \"check_\" + flashcard_r1.FlashcardId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", \"quality_\" + flashcard_r1.FlashcardId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"id\", \"ins3_\" + flashcard_r1.FlashcardId);\n    i0.ɵɵadvance(15);\n    i0.ɵɵproperty(\"id\", \"loading_\" + flashcard_r1.FlashcardId);\n    i0.ɵɵadvance(13);\n    i0.ɵɵproperty(\"id\", \"ans3_\" + flashcard_r1.FlashcardId);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(flashcard_r1.Back);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"id\", \"explanation_\" + flashcard_r1.FlashcardId);\n  }\n}\nconst _c0 = function (a1) {\n  return [\"/deck/\", a1];\n};\nconst _c1 = function (a1) {\n  return [\"/flashcardone/\", a1];\n};\nconst _c2 = function (a1) {\n  return [\"/flashcardtwo/\", a1];\n};\nconst _c3 = function (a1) {\n  return [\"/flashcardthree/\", a1];\n};\nexport class FlashcardthreeComponent {\n  constructor(_router, _route, _flashcardService, _deckService) {\n    this._router = _router;\n    this._route = _route;\n    this._flashcardService = _flashcardService;\n    this._deckService = _deckService;\n    this.decks = [];\n    this.deck = {\n      DeckId: 0,\n      DeckName: \"\",\n      DeckDescription: \"\",\n      CreationDate: \"\",\n      FolderId: 0\n    };\n    this.flashcards = [];\n    this.flashcard = {\n      FlashcardId: 0,\n      Front: \"\",\n      Back: \"\",\n      CreationDate: \"\",\n      DeckId: 0\n    };\n  }\n  // Function to update the CreationDate attribute to store only the date part\n  updateCreationDateDeck(deck) {\n    const datePart = deck.CreationDate.split('T')[0];\n    deck.CreationDate = datePart;\n    return deck;\n  }\n  getFlashcards(deckId) {\n    // call to the server with the url \"api/item/\", expected return type is an IFolder array. This is also an observable return by the get\n    this._flashcardService.getFlashcardsByDeckId(deckId).subscribe(data => {\n      this.flashcards = this.shuffleFlashcard(data);\n    });\n  }\n  getDecks(folderId) {\n    // call to the server with the url \"api/item/\", expected return type is an IFolder array. This is also an observable return by the get\n    this._deckService.getDecksByFolderId(folderId).subscribe(data => {\n      this.decks = data;\n      this.decks.forEach(deck => {\n        this.updateCreationDateDeck(deck);\n      });\n    });\n  }\n  getDeck(deckId) {\n    this._deckService.getDeckById(deckId).subscribe(data => {\n      this.deck = data;\n      this.updateCreationDateDeck(this.deck);\n    });\n  }\n  shuffleFlashcard(array) {\n    return array.slice().sort(() => Math.random() - 0.5);\n  }\n  getBack(flashcardid) {\n    const submit = document.getElementById(\"submit_\" + flashcardid);\n    const status = document.getElementById(\"status_\" + flashcardid);\n    const loading = document.getElementById(\"loading_\" + flashcardid);\n    const check = document.getElementById(\"check_\" + flashcardid);\n    const text = document.getElementById(\"text_\" + flashcardid);\n    const flashcardFront = document.getElementById(\"front_\" + flashcardid);\n    const error = document.getElementById(\"error_\" + flashcardid);\n    // Get the back input within the flashcard\n    const userInput = text.value;\n    const front = flashcardFront.innerText;\n    console.log(userInput);\n    if (!userInput.trim() || userInput.length == 0) {\n      error.innerHTML = \"Write something\";\n    } else {\n      check.style.display = \"none\";\n      loading.style.display = \"flex\";\n      status.style.display = \"inline\";\n      submit.disabled = true;\n      error.innerHTML = \"\";\n      this.fetchData(front, userInput, flashcardid);\n    }\n  }\n  fetchData(front, input, flashcardid) {\n    return _asyncToGenerator(function* () {\n      const submit = document.getElementById(\"submit_\" + flashcardid);\n      const status = document.getElementById(\"status_\" + flashcardid);\n      const loading = document.getElementById(\"loading_\" + flashcardid);\n      const check = document.getElementById(\"check_\" + flashcardid);\n      let numberRating = 0;\n      let qualitativeRating = \"\";\n      let explanation = \"\";\n      const numberRatingDict = {\n        0: \"#cb3a36\",\n        1: \"#e58f2a\",\n        2: \"#f7c045\",\n        3: \"#96bc4b\",\n        4: \"#53c7e0\"\n      };\n      // Hard coding the API key for easier access\n      const API_KEY = \"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\";\n      // PUT THE API KEY HERE\n      const response1 = yield fetch(\"https://api.openai.com/v1/chat/completions\", {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${API_KEY}`,\n          \"Content-Type\": 'application/json'\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          messages: [{\n            role: \"system\",\n            content: \"You are an evaluator assessing the user's response to a flashcard front they have created. Provide a strict evaluation. The number rating should be 0-4, 0 being the worst. The format should be: '(number rating) ||| Rating: (qualitative rating) ||| Reasoning: (explanation).'\"\n          }, {\n            role: \"user\",\n            content: `Flashcard Front: ${front} | User's Response: ${input}`\n          }],\n          temperature: 0.1,\n          max_tokens: 150,\n          top_p: 1,\n          frequency_penalty: 0,\n          presence_penalty: 0\n        })\n      });\n      const data = yield response1.json();\n      setInterval(() => {\n        status.style.display = \"none\";\n        check.style.display = \"inline\";\n        submit.disabled = false;\n      }, 10000);\n      try {\n        // cleaning the response from the api and storing them in variables for later use\n        const content = data.choices[0].message.content;\n        const responseString = content.split(\"|||\");\n        const rating = responseString[0].trim();\n        const evaluation = responseString[1].trim();\n        const response = responseString[2].trim();\n        // the extracted values \n        numberRating = rating;\n        qualitativeRating = evaluation;\n        explanation = response;\n        const instruction3 = document.getElementById(\"ins3_\" + flashcardid);\n        const back3 = document.getElementById(\"ans3_\" + flashcardid);\n        if (openaiResponded(numberRating, qualitativeRating, explanation)) {\n          submit.disabled = false;\n          check.style.display = \"inline\";\n          status.style.display = \"none\";\n          loading.style.display = \"none\";\n          instruction3.style.display = \"none\";\n          back3.style.display = \"flex\";\n          displayResponse(flashcardid);\n        } else {\n          check.style.display = \"inline\";\n          submit.disabled = false;\n          status.style.display = \"none\";\n          loading.style.display = \"none\";\n        }\n      } catch {\n        setTimeout(() => {\n          loading.innerHTML = \"Something went wrong\";\n        }, 9000);\n      }\n      // checks if the global variables  numberRating, qualitativeRating, explanation are null\n      // that means that we haven't gotten a response from openai's api\n      function openaiResponded(numberRating, qualitativeRating, explanation) {\n        // we have not gotten a proper response \n        if (numberRating == null || qualitativeRating == null || explanation == null) {\n          return false;\n        } else {\n          return true;\n        }\n      }\n      function displayResponse(flashcardid) {\n        // rating display\n        const rating = document.getElementById(\"rating_\" + flashcardid);\n        rating.style.background = numberRatingDict[numberRating];\n        // Color display\n        const quality = document.getElementById(\"quality_\" + flashcardid);\n        quality.innerHTML = qualitativeRating;\n        // Display OpenAI's response\n        const evaluationDiv = document.getElementById(\"explanation_\" + flashcardid);\n        evaluationDiv.innerHTML = explanation;\n        // after displaying the response from openai's api, \"reset\" the variables so they are ready for the \"openaiResponded\"-check\n        numberRating = 0;\n        qualitativeRating = \"\";\n        explanation = \"\";\n      }\n    })();\n  }\n  updateButtonsState() {\n    const prevButton = document.getElementById('prev');\n    const nextButton = document.getElementById('next');\n    const restartButton = document.getElementById('restart');\n    const progressBar = document.getElementById('progress-bar');\n    const carouselItems = document.querySelectorAll('.carousel-item');\n    let currentIndex;\n    let isEndReached;\n    currentIndex = Array.from(carouselItems).indexOf(document.querySelector('.carousel-item.active'));\n    // Disable the \"Previous\" button if on the first flashcard\n    if (prevButton) {\n      prevButton.disabled = currentIndex === 0;\n    }\n    // Check if on the last flashcard\n    if (currentIndex === carouselItems.length - 1) {\n      if (nextButton) {\n        nextButton.disabled = true;\n      }\n      isEndReached = true;\n      if (restartButton) {\n        restartButton.style.display = 'block'; // Show the restart button\n      }\n    } else {\n      if (nextButton) {\n        nextButton.disabled = false;\n      }\n      isEndReached = false;\n      if (restartButton) {\n        restartButton.style.display = 'none'; // Hide the restart button\n      }\n    }\n    // Update the progress bar\n    // Calculate the progress while excluding the first carousel item\n    const progress = currentIndex / (carouselItems.length - 1) * 100;\n    if (progressBar) {\n      progressBar.style.width = progress + '%';\n      progressBar.setAttribute('aria-valuenow', progress.toString());\n    }\n  }\n  restartCarousel() {\n    const carousel = document.getElementById('flashcard-three');\n    const carouselItems = document.querySelectorAll('.carousel-item');\n    let isEndReached;\n    isEndReached = false;\n    // Remove 'active' class from all carousel items\n    carouselItems.forEach(item => {\n      item.classList.remove('active');\n    });\n    // Add 'active' class to the first carousel item\n    carouselItems[0].classList.add('active');\n    // Manually trigger the slid event to update the button state\n    carousel?.dispatchEvent(new Event('slid.bs.carousel'));\n    // Update the button state\n    this.updateButtonsState();\n  }\n  return() {\n    if (this.deck.FolderId == null) {\n      this._router.navigate([\"/library\"]);\n    } else {\n      this._router.navigate([\"/folder/\" + this.deck.FolderId]);\n    }\n  }\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      const id = this.deck.DeckId = +params[\"id\"];\n      this.getDeck(id);\n      this.getFlashcards(id);\n    });\n    this.updateButtonsState();\n    const carousel = document.getElementById('flashcard-three');\n    if (carousel) {\n      carousel.addEventListener('slid.bs.carousel', this.updateButtonsState);\n    }\n  }\n}\nFlashcardthreeComponent.ɵfac = function FlashcardthreeComponent_Factory(t) {\n  return new (t || FlashcardthreeComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FlashcardService), i0.ɵɵdirectiveInject(i3.DeckService));\n};\nFlashcardthreeComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FlashcardthreeComponent,\n  selectors: [[\"app-flashcard-flashcardform\"]],\n  decls: 53,\n  vars: 16,\n  consts: [[1, \"container\", 2, \"margin-bottom\", \"10rem\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-end\", \"mt-5\"], [1, \"btn\", \"btn-secondary\", \"btn-block\", \"mb-1\", 3, \"click\"], [1, \"fa-solid\", \"fa-arrow-left-long\"], [1, \"m-0\"], [1, \"link-secondary\", \"text-decoration-none\", \"ms-2\", 3, \"routerLink\"], [1, \"fa-solid\", \"fa-gear\", \"fa-2x\"], [1, \"d-flex\", \"justify-content-center\", \"mt-5\"], [\"role\", \"group\", \"aria-label\", \"Basic example\", 1, \"btn-group\"], [1, \"btn\", \"btn-outline-secondary\", \"d-flex\", \"align-items-center\", 3, \"routerLink\"], [\"src\", \"assets/img/type1.png\", 2, \"width\", \"2rem\", \"margin-right\", \"5px\"], [1, \"m-0\", \"d-none\", \"d-md-block\"], [\"src\", \"assets/img/type2.png\", 2, \"width\", \"2.5rem\"], [1, \"btn\", \"btn-outline-secondary\", \"d-flex\", \"align-items-center\", \"active\", 3, \"routerLink\"], [\"src\", \"assets/img/type3.png\", 2, \"width\", \"2rem\"], [1, \"instruction\", \"mt-4\", \"p-3\"], [1, \"container\", \"mt-3\", \"mb-4\"], [1, \"progress\"], [\"id\", \"progress-bar\", \"role\", \"progressbar\", \"aria-valuenow\", \"0\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", \"progress-bar-striped\", \"progress-bar-animated\", \"bg-success\", 2, \"width\", \"0%\"], [1, \"carousel-container\", \"shadow\", \"p-0\", \"rounded-0\", 2, \"height\", \"40rem\"], [\"id\", \"flashcard-three\", 1, \"carousel\", \"slide\", \"h-100\"], [1, \"carousel-inner\", \"h-100\"], [1, \"carousel-item\", \"active\"], [1, \"h-100\", \"d-flex\", \"flex-column\", \"align-items-center\", \"justify-content-center\"], [4, \"ngFor\", \"ngForOf\"], [1, \"carousel-item\"], [\"id\", \"restart\", \"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 2, \"width\", \"8rem\", 3, \"click\"], [1, \"d-flex\", \"align-items-center\", \"justify-content-evenly\", \"mt-4\"], [\"id\", \"prev\", \"type\", \"button\", \"data-bs-target\", \"#flashcard-three\", \"data-bs-slide\", \"prev\", 1, \"btn\", \"btn-outline-secondary\"], [1, \"fa-solid\", \"fa-arrow-left\"], [1, \"fa-solid\", \"fa-crown\", \"fa-2x\"], [\"id\", \"next\", \"type\", \"button\", \"data-bs-target\", \"#flashcard-three\", \"data-bs-slide\", \"next\", 1, \"btn\", \"btn-outline-secondary\"], [1, \"fa-solid\", \"fa-arrow-right\"], [1, \"carousel-item\", \"w-100\", 2, \"word-break\", \"break-word\", \"height\", \"40rem\"], [\"id\", \"type-3\", 1, \"d-flex\", \"h-100\"], [1, \"d-flex\", \"flex-column\", \"p-4\", \"justify-content-center\", \"h-100\", 3, \"id\"], [1, \"d-flex\", \"flex-column\", \"justify-content-end\", \"align-items-center\", \"h-100\"], [3, \"id\"], [1, \"d-flex\", \"flex-column\", \"align-items-center\"], [\"placeholder\", \"Your back here\", 1, \"w-100\", 3, \"id\"], [2, \"color\", \"red\", 3, \"id\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"w-50\", \"submit3\", 3, \"id\", \"click\"], [2, \"display\", \"none\", 3, \"id\"], [\"role\", \"status\", \"aria-hidden\", \"true\", 1, \"spinner-border\", \"spinner-border-sm\"], [1, \"sr-only\"], [1, \"fa-solid\", \"fa-check\", 3, \"id\"], [1, \"d-flex\", \"justify-content-center\", \"align-items-center\", \"response\", 2, \"background-color\", \"#F0F0F0\"], [1, \"flex-column\", \"align-items-center\", \"justify-content-center\", 2, \"display\", \"flex\", 3, \"id\"], [1, \"mb-3\", \"mt-3\"], [1, \"justify-content-around\", 2, \"height\", \"2rem\", \"width\", \"10rem\", \"display\", \"none\", 3, \"id\"], [\"role\", \"status\", 1, \"spinner-grow\", \"text-success\", 2, \"width\", \"2rem\", \"height\", \"2rem\"], [\"role\", \"status\", 1, \"spinner-grow\", \"text-danger\", 2, \"width\", \"2rem\", \"height\", \"2rem\"], [\"role\", \"status\", 1, \"spinner-grow\", \"text-warning\", 2, \"width\", \"2rem\", \"height\", \"2rem\"], [\"role\", \"status\", 1, \"spinner-grow\", \"text-info\", 2, \"width\", \"2rem\", \"height\", \"2rem\"], [1, \"flex-column\", \"h-100\", 2, \"display\", \"none\", 3, \"id\"], [1, \"d-flex\", \"flex-column\", \"justify-content-center\", \"border-bottom\", \"border-4\", \"pb-3\", 2, \"height\", \"45%\"], [1, \"mb-3\"], [1, \"d-flex\", \"flex-column\", \"h-75\", \"justify-content-center\", 2, \"height\", \"55%\"], [1, \"m-0\", 3, \"id\"]],\n  template: function FlashcardthreeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"a\", 2);\n      i0.ɵɵlistener(\"click\", function FlashcardthreeComponent_Template_a_click_2_listener() {\n        return ctx.return();\n      });\n      i0.ɵɵelement(3, \"i\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"h1\", 4);\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"a\", 5);\n      i0.ɵɵelement(7, \"i\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(8, \"hr\");\n      i0.ɵɵelementStart(9, \"div\", 7)(10, \"div\", 8)(11, \"a\", 9);\n      i0.ɵɵelement(12, \"img\", 10);\n      i0.ɵɵelementStart(13, \"p\", 11);\n      i0.ɵɵtext(14, \"Default\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"a\", 9);\n      i0.ɵɵelement(16, \"img\", 12);\n      i0.ɵɵelementStart(17, \"p\", 11);\n      i0.ɵɵtext(18, \"Matching\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"a\", 13);\n      i0.ɵɵelement(20, \"img\", 14);\n      i0.ɵɵelementStart(21, \"p\", 11);\n      i0.ɵɵtext(22, \"GPT-Quiz\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(23, \"div\", 15)(24, \"p\");\n      i0.ɵɵtext(25, \"Back and the GPT will review it \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(26, \"div\", 16)(27, \"div\", 17);\n      i0.ɵɵelement(28, \"div\", 18);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(29, \"div\", 19)(30, \"div\", 20)(31, \"div\", 21)(32, \"div\", 22)(33, \"div\", 23)(34, \"h1\");\n      i0.ɵɵtext(35, \"Start\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(36, \"p\");\n      i0.ɵɵtext(37);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(38, \"p\");\n      i0.ɵɵtext(39);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵtemplate(40, FlashcardthreeComponent_div_40_Template, 57, 14, \"div\", 24);\n      i0.ɵɵelementStart(41, \"div\", 25)(42, \"div\", 23)(43, \"h1\");\n      i0.ɵɵtext(44, \"Finito!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(45, \"button\", 26);\n      i0.ɵɵlistener(\"click\", function FlashcardthreeComponent_Template_button_click_45_listener() {\n        return ctx.restartCarousel();\n      });\n      i0.ɵɵtext(46, \" Restart \");\n      i0.ɵɵelementEnd()()()()()();\n      i0.ɵɵelementStart(47, \"div\", 27)(48, \"button\", 28);\n      i0.ɵɵelement(49, \"i\", 29);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(50, \"i\", 30);\n      i0.ɵɵelementStart(51, \"button\", 31);\n      i0.ɵɵelement(52, \"i\", 32);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate(ctx.deck.DeckName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(8, _c0, ctx.deck.DeckId));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(10, _c1, ctx.deck.DeckId));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(12, _c2, ctx.deck.DeckId));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(14, _c3, ctx.deck.DeckId));\n      i0.ɵɵadvance(18);\n      i0.ɵɵtextInterpolate1(\"Introduction card of \", ctx.deck.DeckName, \" Deck\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"Date of Creation: \", ctx.deck.CreationDate, \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.flashcards);\n    }\n  },\n  dependencies: [i4.NgForOf, i1.RouterLink],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","FlashcardthreeComponent","constructor","_router","_route","_flashcardService","_deckService","DeckId","DeckName","DeckDescription","CreationDate","FolderId","FlashcardId","Front","Back","updateCreationDateDeck","deck","datePart","split","getFlashcards","deckId","getFlashcardsByDeckId","subscribe","data","flashcards","shuffleFlashcard","getDecks","folderId","getDecksByFolderId","decks","forEach","getDeck","getDeckById","array","slice","sort","Math","random","getBack","flashcardid","submit","document","getElementById","status","loading","check","text","flashcardFront","error","userInput","value","front","innerText","console","log","trim","length","innerHTML","style","display","disabled","fetchData","input","numberRating","qualitativeRating","explanation","numberRatingDict","API_KEY","response1","fetch","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","temperature","max_tokens","top_p","frequency_penalty","presence_penalty","json","setInterval","choices","message","responseString","rating","evaluation","response","instruction3","back3","openaiResponded","displayResponse","setTimeout","background","quality","evaluationDiv","updateButtonsState","prevButton","nextButton","restartButton","progressBar","carouselItems","querySelectorAll","currentIndex","isEndReached","Array","from","indexOf","querySelector","progress","width","setAttribute","toString","restartCarousel","carousel","item","classList","remove","add","dispatchEvent","Event","return","navigate","ngOnInit","params","id","addEventListener","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\BachelorProject\\API\\ClientApp\\src\\app\\flashcard\\flashcardthree.component.html","C:\\Users\\elija\\source\\repos\\BachelorProject\\API\\ClientApp\\src\\app\\flashcard\\flashcardthree.component.ts"],"sourcesContent":["<section class=\"container\" style=\"margin-bottom: 10rem\">\r\n  <!-- Deck navigation and actions -->\r\n  <div class=\"d-flex justify-content-between align-items-end mt-5\">\r\n    <!-- Return to folder dashboard button -->\r\n    <a class=\"btn btn-secondary btn-block mb-1\"\r\n       (click)=\"return()\">\r\n      <i class=\"fa-solid fa-arrow-left-long\"></i>\r\n    </a>\r\n    <!-- Deck title -->\r\n    <h1 class=\"m-0\">{{deck.DeckName}}</h1>\r\n    <!-- Deck settings button -->\r\n    <a class=\"link-secondary text-decoration-none ms-2\"\r\n       [routerLink]=\"['/deck/', deck.DeckId]\">\r\n      <i class=\"fa-solid fa-gear fa-2x\"></i>\r\n    </a>\r\n  </div>\r\n  <hr />\r\n  <!-- Flashcard type selection buttons -->\r\n  <div class=\"d-flex justify-content-center mt-5\">\r\n    <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n      <!-- Flashcard type one button -->\r\n      <a class=\"btn btn-outline-secondary d-flex align-items-center\"\r\n         [routerLink]=\"['/flashcardone/', deck.DeckId]\">\r\n        <img src=\"assets/img/type1.png\" style=\"width: 2rem; margin-right: 5px\" />\r\n        <p class=\"m-0 d-none d-md-block\">Default</p>\r\n      </a>\r\n      <!-- Flashcard type two button -->\r\n      <a class=\"btn btn-outline-secondary d-flex align-items-center\"\r\n         [routerLink]=\"['/flashcardtwo/', deck.DeckId]\">\r\n        <img src=\"assets/img/type2.png\" style=\"width: 2.5rem;\" />\r\n        <p class=\"m-0 d-none d-md-block\">Matching</p>\r\n      </a>\r\n      <a class=\"btn btn-outline-secondary d-flex align-items-center active\"\r\n         [routerLink]=\"['/flashcardthree/', deck.DeckId]\">\r\n        <img src=\"assets/img/type3.png\" style=\"width: 2rem;\" />\r\n        <p class=\"m-0 d-none d-md-block\">GPT-Quiz</p>\r\n      </a>\r\n    </div>\r\n  </div>\r\n  <!-- Instructions -->\r\n  <div class=\"instruction mt-4 p-3\">\r\n    <p>Back and the GPT will review it </p>\r\n  </div>\r\n  <!-- Progress bar -->\r\n  <div class=\"container mt-3 mb-4\">\r\n    <div class=\"progress\">\r\n      <div id=\"progress-bar\" class=\"progress-bar progress-bar-striped progress-bar-animated bg-success\" role=\"progressbar\" style=\"width: 0%\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\r\n    </div>\r\n  </div>\r\n  <div class=\"carousel-container shadow p-0 rounded-0\" style=\"height: 40rem;\">\r\n    <div id=\"flashcard-three\" class=\"carousel slide h-100\">\r\n      <div class=\"carousel-inner h-100\">\r\n        <div class=\"carousel-item active\">\r\n          <div class=\"h-100 d-flex flex-column align-items-center justify-content-center\">\r\n            <h1>Start</h1>\r\n            <p>Introduction card of {{deck.DeckName}} Deck</p>\r\n            <p>Date of Creation: {{deck.CreationDate}}</p>\r\n          </div>\r\n        </div>\r\n        <!---- carousel loop starts here  ----->\r\n        <div *ngFor=\"let flashcard of flashcards\">\r\n          <div class=\"carousel-item w-100\" style=\"word-break: break-word; height: 40rem;\">\r\n            <div class=\"d-flex h-100\" id=\"type-3\">\r\n              <div class=\"d-flex flex-column p-4 justify-content-center h-100\" [id]=\"'rating_' + flashcard.FlashcardId\">\r\n                <div class=\"d-flex flex-column justify-content-end align-items-center h-100\">\r\n                  <p [id]=\"'front_' + flashcard.FlashcardId\">{{flashcard.Front}}</p>\r\n                </div>\r\n                <div class=\"d-flex flex-column align-items-center\">\r\n                  <textarea [id]=\"'text_' + flashcard.FlashcardId\" class=\"w-100\" placeholder=\"Your back here\"></textarea>\r\n                  <p [id]=\"'error_' + flashcard.FlashcardId\" style=\"color: red\"></p>\r\n                  <button [id]=\"'submit_' + flashcard.FlashcardId\" class=\"btn btn-primary w-50 submit3\" type=\"button\" (click)=\"getBack(flashcard.FlashcardId)\">\r\n                    <div [id]=\"'status_' + flashcard.FlashcardId\" style=\"display: none\">\r\n                      <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\r\n                      <span class=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                    <i class=\"fa-solid fa-check\" [id]=\"'check_' + flashcard.FlashcardId\"></i>\r\n                  </button>\r\n                </div>\r\n                <p [id]=\"'quality_' + flashcard.FlashcardId\"></p>\r\n              </div>\r\n              <!----- Instruction ----->\r\n              <div class=\"d-flex justify-content-center align-items-center response\" style=\"background-color: #F0F0F0;\">\r\n                <div [id]=\"'ins3_' + flashcard.FlashcardId\" class=\"flex-column align-items-center justify-content-center\" style=\"display: flex\">\r\n                  <h2 class=\"mb-3 mt-3\">Instructions</h2>\r\n                  <div>\r\n                    <ul>\r\n                      <li>The flashcard's fronts and backs should make sense for GPT to help.</li>\r\n                      <li>For each flashcard, read the front and input your back in the provided text box.</li>\r\n                      <li>Click the \"Submit\" button to get feedback from GPT.</li>\r\n                      <li>GPT will provide an explanation and rating for your back.</li>\r\n                      <li>Please wait patiently while GPT reviews your back.</li>\r\n                    </ul>\r\n                  </div>\r\n\r\n                  <div [id]=\"'loading_' + flashcard.FlashcardId\" class=\"justify-content-around\" style=\"height: 2rem; width: 10rem; display: none;\">\r\n                    <div class=\"spinner-grow text-success\" role=\"status\" style=\"width: 2rem; height: 2rem;\">\r\n                      <span class=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                    <div class=\"spinner-grow text-danger\" role=\"status\" style=\"width: 2rem; height: 2rem;\">\r\n                      <span class=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                    <div class=\"spinner-grow text-warning\" role=\"status\" style=\"width: 2rem; height: 2rem;\">\r\n                      <span class=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                    <div class=\"spinner-grow text-info\" role=\"status\" style=\"width: 2rem; height: 2rem;\">\r\n                      <span class=\"sr-only\">Loading...</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div [id]=\"'ans3_' + flashcard.FlashcardId\" class=\"flex-column h-100\" style=\"display: none;\">\r\n                  <div class=\"d-flex flex-column justify-content-center border-bottom border-4 pb-3\" style=\"height: 45%\">\r\n                    <p class=\"mb-3\">Flashcard's Back:</p>\r\n                    <p class=\"m-0\">{{flashcard.Back}}</p>\r\n                  </div>\r\n                  <div class=\"d-flex flex-column  h-75 justify-content-center\" style=\"height: 55%\">\r\n                    <p class=\"mb-3\">GPT explanation:</p>\r\n                    <p [id]=\"'explanation_' + flashcard.FlashcardId\" class=\"m-0\">ChatGPT Rating and Suggestion</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"carousel-item\">\r\n          <div class=\"h-100 d-flex flex-column align-items-center justify-content-center\">\r\n            <h1>Finito!</h1>\r\n            <button id=\"restart\" class=\"btn btn-outline-secondary\" style=\"width:8rem;\" type=\"button\" (click)=\"restartCarousel()\">\r\n              Restart\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <!-- Navigation buttons for the carousel -->\r\n  <div class=\"d-flex align-items-center justify-content-evenly mt-4\">\r\n    <button id=\"prev\" class=\"btn btn-outline-secondary\" type=\"button\" data-bs-target=\"#flashcard-three\" data-bs-slide=\"prev\">\r\n      <i class=\"fa-solid fa-arrow-left\"></i>\r\n    </button>\r\n    <i class=\"fa-solid fa-crown fa-2x\"></i>\r\n    <button id=\"next\" class=\"btn btn-outline-secondary\" type=\"button\" data-bs-target=\"#flashcard-three\" data-bs-slide=\"next\">\r\n      <i class=\"fa-solid fa-arrow-right\"></i>\r\n    </button>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { IDeck } from \"../models/deck\";\r\nimport { IFlashcard } from \"../models/flashcard\";\r\nimport { FlashcardService } from \"../services/flashcard.service\";\r\nimport { DeckService } from \"../services/deck.service\";\r\n\r\n@Component({\r\n  selector: \"app-flashcard-flashcardform\",\r\n  templateUrl: \"./flashcardthree.component.html\"\r\n})\r\n\r\nexport class FlashcardthreeComponent {\r\n  decks: IDeck[] = [];\r\n  deck: IDeck = {\r\n    DeckId: 0,\r\n    DeckName: \"\",\r\n    DeckDescription: \"\",\r\n    CreationDate: \"\",\r\n    FolderId: 0\r\n  };\r\n  flashcards: IFlashcard[] = []\r\n  flashcard: IFlashcard = {\r\n    FlashcardId: 0,\r\n    Front: \"\",\r\n    Back: \"\",\r\n    CreationDate: \"\",\r\n    DeckId: 0\r\n  }\r\n\r\n  constructor(\r\n    private _router: Router,\r\n    private _route: ActivatedRoute,\r\n    private _flashcardService: FlashcardService,\r\n    private _deckService: DeckService) {\r\n  }\r\n\r\n  // Function to update the CreationDate attribute to store only the date part\r\n  updateCreationDateDeck(deck: IDeck): IDeck {\r\n    const datePart = deck.CreationDate.split('T')[0];\r\n    deck.CreationDate = datePart;\r\n    return deck;\r\n  }\r\n\r\n  getFlashcards(deckId: number): void {\r\n    // call to the server with the url \"api/item/\", expected return type is an IFolder array. This is also an observable return by the get\r\n    this._flashcardService.getFlashcardsByDeckId(deckId)\r\n      .subscribe(data => { // subscribe() used to receive the data when the response is received\r\n        this.flashcards = this.shuffleFlashcard(data);\r\n      });\r\n  }\r\n\r\n  getDecks(folderId: number): void {\r\n    // call to the server with the url \"api/item/\", expected return type is an IFolder array. This is also an observable return by the get\r\n    this._deckService.getDecksByFolderId(folderId)\r\n      .subscribe(data => { // subscribe() used to receive the data when the response is received\r\n        this.decks = data;\r\n        this.decks.forEach(deck => {\r\n          this.updateCreationDateDeck(deck)\r\n        })\r\n      });\r\n  }\r\n\r\n  getDeck(deckId: number): void {\r\n    this._deckService.getDeckById(deckId)\r\n      .subscribe(data => {\r\n        this.deck = data;\r\n        this.updateCreationDateDeck(this.deck);\r\n      })\r\n  }\r\n\r\n  shuffleFlashcard<T>(array: T[]): T[] {\r\n    return array.slice().sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n  getBack(flashcardid: number) {\r\n    const submit = document.getElementById(\"submit_\" + flashcardid) as HTMLButtonElement;\r\n    const status = document.getElementById(\"status_\" + flashcardid) as HTMLElement;\r\n    const loading = document.getElementById(\"loading_\" + flashcardid) as HTMLElement;\r\n    const check = document.getElementById(\"check_\" + flashcardid) as HTMLElement;\r\n    const text = document.getElementById(\"text_\" + flashcardid) as HTMLTextAreaElement;\r\n    const flashcardFront = document.getElementById(\"front_\" + flashcardid) as HTMLElement;\r\n    const error = document.getElementById(\"error_\" + flashcardid) as HTMLElement;\r\n\r\n\r\n    // Get the back input within the flashcard\r\n    const userInput = text.value;\r\n    const front = flashcardFront.innerText;\r\n    console.log(userInput)\r\n\r\n\r\n    if (!userInput.trim() || userInput.length == 0) {\r\n      error.innerHTML = \"Write something\";\r\n    } else {\r\n      check.style.display = \"none\";\r\n      loading.style.display = \"flex\";\r\n      status.style.display = \"inline\";\r\n      submit.disabled = true;\r\n      error.innerHTML = \"\";\r\n      this.fetchData(front, userInput, flashcardid);\r\n    }\r\n\r\n  }\r\n\r\n  async fetchData(front: string, input: string, flashcardid: number) {\r\n    const submit = document.getElementById(\"submit_\" + flashcardid) as HTMLButtonElement;\r\n    const status = document.getElementById(\"status_\" + flashcardid) as HTMLElement;\r\n    const loading = document.getElementById(\"loading_\" + flashcardid) as HTMLElement;\r\n    const check = document.getElementById(\"check_\" + flashcardid) as HTMLElement;\r\n\r\n\r\n    let numberRating = 0;\r\n    let qualitativeRating = \"\";\r\n    let explanation = \"\";\r\n    const numberRatingDict: Record<number, string> = {\r\n      0: \"#cb3a36\",\r\n      1: \"#e58f2a\",\r\n      2: \"#f7c045\",\r\n      3: \"#96bc4b\",\r\n      4: \"#53c7e0\"\r\n    }; \r\n\r\n    // Hard coding the API key for easier access\r\n    const API_KEY = \"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\";\r\n    // PUT THE API KEY HERE\r\n\r\n    const response1 = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${API_KEY}`,\r\n        \"Content-Type\": 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        model: \"gpt-3.5-turbo\",\r\n        messages: [\r\n          {\r\n            role: \"system\",\r\n            content: \"You are an evaluator assessing the user's response to a flashcard front they have created. Provide a strict evaluation. The number rating should be 0-4, 0 being the worst. The format should be: '(number rating) ||| Rating: (qualitative rating) ||| Reasoning: (explanation).'\",\r\n          },\r\n          {\r\n            role: \"user\",\r\n            content: `Flashcard Front: ${front} | User's Response: ${input}`,\r\n          },\r\n        ],\r\n        temperature: 0.1,\r\n        max_tokens: 150,\r\n        top_p: 1,\r\n        frequency_penalty: 0,\r\n        presence_penalty: 0,\r\n      }),\r\n    });\r\n    const data = await response1.json();\r\n    setInterval(() => {\r\n      status.style.display = \"none\";\r\n      check.style.display = \"inline\"\r\n      submit.disabled = false;\r\n    }, 10000)\r\n\r\n    try {\r\n      // cleaning the response from the api and storing them in variables for later use\r\n      const content = data.choices[0].message.content;\r\n      const responseString = content.split(\"|||\");\r\n      const rating = responseString[0].trim();\r\n      const evaluation = responseString[1].trim();\r\n      const response = responseString[2].trim();\r\n\r\n      // the extracted values \r\n      numberRating = rating;\r\n      qualitativeRating = evaluation;\r\n      explanation = response;\r\n\r\n      const instruction3 = document.getElementById(\"ins3_\" + flashcardid) as HTMLElement;\r\n      const back3 = document.getElementById(\"ans3_\" + flashcardid) as HTMLElement;\r\n\r\n\r\n      if (openaiResponded(numberRating, qualitativeRating, explanation)) {\r\n        submit.disabled = false;\r\n        check.style.display = \"inline\"\r\n        status.style.display = \"none\";\r\n        loading.style.display = \"none\";\r\n        instruction3.style.display = \"none\";\r\n        back3.style.display = \"flex\";\r\n        displayResponse(flashcardid);\r\n      } else {\r\n        check.style.display = \"inline\"\r\n        submit.disabled = false;\r\n        status.style.display = \"none\";\r\n        loading.style.display = \"none\";\r\n      }\r\n    } catch {\r\n      setTimeout(() => {\r\n        loading.innerHTML = \"Something went wrong\";\r\n      }, 9000);\r\n    }\r\n\r\n    // checks if the global variables  numberRating, qualitativeRating, explanation are null\r\n    // that means that we haven't gotten a response from openai's api\r\n    function openaiResponded(numberRating: number, qualitativeRating: string, explanation: string) {\r\n      // we have not gotten a proper response \r\n      if ((numberRating == null) || (qualitativeRating == null) || (explanation == null)) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n    function displayResponse(flashcardid: number) {\r\n      // rating display\r\n      const rating = document.getElementById(\"rating_\" + flashcardid) as HTMLElement;\r\n      rating.style.background = numberRatingDict[numberRating];\r\n\r\n      // Color display\r\n      const quality = document.getElementById(\"quality_\" + flashcardid) as HTMLElement;\r\n      quality.innerHTML = qualitativeRating;\r\n\r\n      // Display OpenAI's response\r\n      const evaluationDiv = document.getElementById(\"explanation_\" + flashcardid) as HTMLElement;\r\n      evaluationDiv.innerHTML = explanation;\r\n\r\n      // after displaying the response from openai's api, \"reset\" the variables so they are ready for the \"openaiResponded\"-check\r\n      numberRating = 0;\r\n      qualitativeRating = \"\";\r\n      explanation = \"\";\r\n    }\r\n\r\n  }\r\n\r\n  updateButtonsState() {\r\n    const prevButton = document.getElementById('prev') as HTMLButtonElement;\r\n    const nextButton = document.getElementById('next') as HTMLButtonElement;\r\n    const restartButton = document.getElementById('restart') as HTMLElement;\r\n    const progressBar = document.getElementById('progress-bar') as HTMLElement;\r\n    const carouselItems = document.querySelectorAll('.carousel-item') as NodeListOf<HTMLElement>;\r\n\r\n    let currentIndex: number;\r\n    let isEndReached: boolean;\r\n    currentIndex = Array.from(carouselItems).indexOf(document.querySelector('.carousel-item.active') as HTMLElement);\r\n\r\n    // Disable the \"Previous\" button if on the first flashcard\r\n    if (prevButton) {\r\n      prevButton.disabled = currentIndex === 0;\r\n    }\r\n\r\n    // Check if on the last flashcard\r\n    if (currentIndex === carouselItems.length - 1) {\r\n      if (nextButton) {\r\n        nextButton.disabled = true;\r\n      }\r\n      isEndReached = true;\r\n      if (restartButton) {\r\n        restartButton.style.display = 'block'; // Show the restart button\r\n      }\r\n    } else {\r\n      if (nextButton) {\r\n        nextButton.disabled = false;\r\n      }\r\n      isEndReached = false;\r\n      if (restartButton) {\r\n        restartButton.style.display = 'none'; // Hide the restart button\r\n      }\r\n    }\r\n\r\n    // Update the progress bar\r\n    // Calculate the progress while excluding the first carousel item\r\n    const progress = ((currentIndex) / (carouselItems.length - 1)) * 100;\r\n    if (progressBar) {\r\n      progressBar.style.width = progress + '%';\r\n      progressBar.setAttribute('aria-valuenow', progress.toString());\r\n    }\r\n  }\r\n\r\n  restartCarousel() {\r\n    const carousel = document.getElementById('flashcard-three') as HTMLElement;\r\n    const carouselItems = document.querySelectorAll('.carousel-item') as NodeListOf<HTMLElement>;\r\n    let isEndReached: boolean;\r\n    isEndReached = false;\r\n\r\n    // Remove 'active' class from all carousel items\r\n    carouselItems.forEach(item => {\r\n      item.classList.remove('active');\r\n    });\r\n\r\n    // Add 'active' class to the first carousel item\r\n    carouselItems[0].classList.add('active');\r\n\r\n    // Manually trigger the slid event to update the button state\r\n    carousel?.dispatchEvent(new Event('slid.bs.carousel'));\r\n\r\n    // Update the button state\r\n    this.updateButtonsState();\r\n  }\r\n\r\n  return() {\r\n    if (this.deck.FolderId == null) {\r\n      this._router.navigate([\"/library\"]);\r\n    } else {\r\n      this._router.navigate([\"/folder/\" + this.deck.FolderId]);\r\n    }\r\n  }\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      const id = this.deck.DeckId = + params[\"id\"]\r\n      this.getDeck(id);\r\n      this.getFlashcards(id);\r\n    })\r\n    this.updateButtonsState();\r\n    const carousel = document.getElementById('flashcard-three') as HTMLElement;\r\n    if (carousel) {\r\n      carousel.addEventListener('slid.bs.carousel', this.updateButtonsState);\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}