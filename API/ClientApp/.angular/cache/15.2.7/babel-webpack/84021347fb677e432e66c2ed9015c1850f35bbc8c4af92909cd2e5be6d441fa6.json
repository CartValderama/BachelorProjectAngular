{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/deck.service\";\nimport * as i4 from \"../services/folder.service\";\nimport * as i5 from \"@angular/common\";\nfunction DeckformComponent_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵtext(1, \" Write 2 - 15 characters long and do not use special character. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DeckformComponent_option_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 28);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const folder_r2 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", folder_r2.FolderId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(folder_r2.FolderName);\n  }\n}\nexport class DeckformComponent {\n  // Constructor to initialize the form and inject services\n  constructor(_formbuilder, _router, _route, _deckService, _folderService) {\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this._deckService = _deckService;\n    this._folderService = _folderService;\n    this.isEditMode = false;\n    this.hasFolder = false;\n    this.deckId = -1;\n    this.folders = [];\n    // Create the form with default values and validation rules\n    this.deckForm = _formbuilder.group({\n      deckName: [\"\", [Validators.required, Validators.minLength(2), Validators.maxLength(100), Validators.pattern(/^[0-9a-zA-ZæøåÆØÅ. -]{2,100}$/)]],\n      deckDescription: [\"\", [Validators.maxLength(150)]],\n      folderId: null\n    });\n  }\n  // Method triggered on form submission\n  onSubmit() {\n    if (!this.deckForm.invalid) {\n      const newDeck = this.deckForm.value;\n      if (this.isEditMode) {\n        // Update existing deck\n        this._deckService.updateDeck(this.deckId, newDeck).subscribe(response => {\n          if (response.success) {\n            this._router.navigate([\"/deck/\" + this.deckId]);\n          } else {\n            console.log(\"Deck update failed\");\n          }\n        });\n      } else {\n        // Create a new deck\n        this._route.params.subscribe(params => {\n          if (this.hasFolder) {\n            // Create deck in a specific folder\n            this._deckService.createDeckInFolder(params[\"id\"], newDeck).subscribe(response => {\n              if (response.success) {\n                this._router.navigate([\"/folder/\" + params[\"id\"]]);\n              } else {\n                console.log(\"Deck creation failed\");\n              }\n            });\n          } else {\n            // Create deck without a folder\n            this._deckService.createDeck(newDeck).subscribe(response => {\n              if (response.success) {\n                if (newDeck.folderId == null) {\n                  this._router.navigate([\"/library\"]);\n                } else {\n                  this._router.navigate([\"/folder/\" + newDeck.folderId]);\n                }\n              } else {\n                console.log(\"Deck creation failed\");\n              }\n            });\n          }\n        });\n      }\n    }\n  }\n  // Method to handle folder selection visibility\n  createCheckFolderId() {\n    const folderSelection = document.getElementById(\"folderSelect\");\n    if (folderSelection) {\n      if (this.hasFolder) {\n        folderSelection.style.display = \"none\";\n      }\n    }\n  }\n  // Method to navigate back to the deck or library\n  backToDecks() {\n    this._route.params.subscribe(params => {\n      const id = params[\"id\"];\n      if (id == \"null\") {\n        this._router.navigate([\"/library\"]);\n      } else {\n        this._router.navigate([\"/deck/\" + id]);\n      }\n    });\n  }\n  // Method to fetch folders from the server\n  getFolders() {\n    this._folderService.getFolders().subscribe(data => {\n      this.folders = data;\n    });\n  }\n  // Lifecycle method called when the component is initialized\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      if (params[\"mode\"] === \"create\") {\n        this.isEditMode = false; // Create mode\n        this.hasFolder = params[\"id\"] !== \"null\";\n      } else if (params[\"mode\"] === \"update\") {\n        this.isEditMode = true; // Edit mode\n        this.deckId = +params[\"id\"];\n        this.loadItemForEdit(this.deckId);\n      }\n    });\n    this.getFolders();\n    this.createCheckFolderId();\n    this.validationDeck();\n  }\n  // Method to load a deck for editing\n  loadItemForEdit(deckId) {\n    // Call the getDeckById method of the deck service to fetch deck details.\n    this._deckService.getDeckById(deckId).subscribe({\n      // Success callback (next): Invoked when deck details are successfully retrieved.\n      next: deck => {\n        // Update the deckForm with the retrieved deck details.\n        this.deckForm.patchValue({\n          deckName: deck.DeckName,\n          deckDescription: deck.DeckDescription,\n          folderSelection: deck.FolderId\n        });\n      },\n      // Error callback: Invoked when an error occurs during the fetch operation.\n      error: error => {\n        console.error(\"Error loading deck for edit: \", error);\n      }\n    });\n  }\n  // Method for deck name validation\n  validationDeck() {\n    const myInput = document.getElementById(\"deckName\");\n    const validationDeck = document.getElementById(\"validationDeck\");\n    if (validationDeck) {\n      validationDeck.style.display = \"none\";\n    }\n    if (myInput && validationDeck) {\n      myInput.addEventListener(\"input\", () => {\n        validationDeck.style.display = \"block\";\n      });\n      setTimeout(() => {\n        validationDeck.style.display = \"block\";\n      }, 10000);\n    }\n  }\n}\nDeckformComponent.ɵfac = function DeckformComponent_Factory(t) {\n  return new (t || DeckformComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.DeckService), i0.ɵɵdirectiveInject(i4.FolderService));\n};\nDeckformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DeckformComponent,\n  selectors: [[\"app-deck-deckform\"]],\n  decls: 36,\n  vars: 5,\n  consts: [[1, \"w-100\", \"vh-100\", \"mt-5\", \"create-deck\"], [1, \"container\", \"d-flex\", \"w-75\", \"justify-content-between\", \"border\", \"border-1\", \"p-0\", \"shadow-sm\", \"bg-body\", \"rounded\"], [1, \"d-none\", \"d-md-block\", \"text-center\", \"w-50\", 2, \"background-color\", \"#BCEAD5\"], [1, \"p-5\", \"mt-5\"], [1, \"fas\", \"fa-book-open\", \"fa-9x\", \"mt-5\", \"mb-4\", 2, \"color\", \"#8ec3b0\"], [1, \"blockquote\"], [1, \"blockquote-footer\"], [\"title\", \"Source Title\"], [1, \"p-5\", \"w-100\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-outline\", \"mb-4\"], [\"for\", \"deckName\"], [\"id\", \"deckName\", \"formControlName\", \"deckName\", \"type\", \"text\", \"autocomplete\", \"off\", \"placeholder\", \"Input a deck name\", \"required\", \"\", 1, \"form-control\"], [\"id\", \"validationDeck\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"id\", \"folderSelect\", 1, \"form-outline\", \"mb-4\"], [\"for\", \"folderId\"], [\"id\", \"folderId\", \"formControlName\", \"folderId\", 1, \"form-control\"], [\"value\", \"null\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"deckDescription\", 1, \"form-label\"], [\"id\", \"deckDescription\", \"formControlName\", \"deckDescription\", \"rows\", \"4\", \"placeholder\", \"Write something about your deck .....\", 1, \"form-control\"], [1, \"form-outline\", \"mb-4\", \"d-flex\", \"justify-content-between\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"btn-block\", \"mb-1\", \"me-1\", 3, \"disabled\"], [1, \"fa-solid\", \"fa-check\"], [1, \"btn\", \"btn-secondary\", \"btn-block\", \"mb-1\", 3, \"click\"], [1, \"fa-solid\", \"fa-arrow-rotate-left\"], [1, \"text-danger\"], [3, \"value\"]],\n  template: function DeckformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵelement(4, \"i\", 4);\n      i0.ɵɵelementStart(5, \"figure\")(6, \"blockquote\", 5)(7, \"p\");\n      i0.ɵɵtext(8, \" \\u201CAn investment in knowledge pays the best interest. \\u201D\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"figcaption\", 6)(10, \"cite\", 7);\n      i0.ɵɵtext(11, \"Emil Magnussen\");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(12, \"div\", 8)(13, \"h2\");\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"hr\");\n      i0.ɵɵelementStart(16, \"form\", 9);\n      i0.ɵɵlistener(\"ngSubmit\", function DeckformComponent_Template_form_ngSubmit_16_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(17, \"div\", 10);\n      i0.ɵɵelement(18, \"label\", 11)(19, \"input\", 12);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\", 13);\n      i0.ɵɵtemplate(21, DeckformComponent_div_21_Template, 2, 0, \"div\", 14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"div\", 15);\n      i0.ɵɵelement(23, \"label\", 16);\n      i0.ɵɵelementStart(24, \"select\", 17)(25, \"option\", 18);\n      i0.ɵɵtext(26, \"none\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(27, DeckformComponent_option_27_Template, 2, 2, \"option\", 19);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(28, \"div\", 10);\n      i0.ɵɵelement(29, \"label\", 20)(30, \"textarea\", 21);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(31, \"div\", 22)(32, \"button\", 23);\n      i0.ɵɵelement(33, \"i\", 24);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(34, \"a\", 25);\n      i0.ɵɵlistener(\"click\", function DeckformComponent_Template_a_click_34_listener() {\n        return ctx.backToDecks();\n      });\n      i0.ɵɵelement(35, \"i\", 26);\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(14);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Deck\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.deckForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.deckForm.invalid);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.folders);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"disabled\", ctx.deckForm.invalid);\n    }\n  },\n  dependencies: [i5.NgForOf, i5.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","DeckformComponent","constructor","_formbuilder","_router","_route","_deckService","_folderService","deckForm","group","deckName","required","minLength","maxLength","pattern","deckDescription","folderId","onSubmit","invalid","newDeck","value","isEditMode","updateDeck","deckId","subscribe","response","success","navigate","console","log","params","hasFolder","createDeckInFolder","createDeck","createCheckFolderId","folderSelection","document","getElementById","style","display","backToDecks","id","getFolders","data","folders","ngOnInit","loadItemForEdit","validationDeck","getDeckById","next","deck","patchValue","DeckName","DeckDescription","FolderId","error","myInput","addEventListener","setTimeout","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\BachelorProject\\API\\ClientApp\\src\\app\\deck\\deckform.component.ts","C:\\Users\\elija\\source\\repos\\BachelorProject\\API\\ClientApp\\src\\app\\deck\\deckform.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { timeout } from \"rxjs\";\r\nimport { IDeck } from \"../models/deck\";\r\nimport { IFolder } from \"../models/folder\";\r\nimport { DeckService } from \"../services/deck.service\";\r\nimport { FolderService } from \"../services/folder.service\";\r\n\r\n@Component({\r\n  selector: \"app-deck-deckform\",\r\n  templateUrl: \"./deckform.component.html\"\r\n})\r\n\r\nexport class DeckformComponent {\r\n  // Component properties\r\n  deckForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  hasFolder: boolean = false;\r\n  deckId: number = -1;\r\n  folders: IFolder[] = [];\r\n\r\n  // Constructor to initialize the form and inject services\r\n  constructor(\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _route: ActivatedRoute,\r\n    private _deckService: DeckService,\r\n    private _folderService: FolderService\r\n  ) {\r\n    // Create the form with default values and validation rules\r\n    this.deckForm = _formbuilder.group({\r\n      deckName: [\"\", [\r\n        Validators.required,\r\n        Validators.minLength(2),\r\n        Validators.maxLength(100),\r\n        Validators.pattern(/^[0-9a-zA-ZæøåÆØÅ. -]{2,100}$/)\r\n      ]],\r\n      deckDescription: [\"\", [Validators.maxLength(150)]],\r\n      folderId: null,\r\n    });\r\n  }\r\n\r\n  // Method triggered on form submission\r\n  onSubmit() {\r\n    if (!this.deckForm.invalid) {\r\n      const newDeck = this.deckForm.value;\r\n      if (this.isEditMode) {\r\n        // Update existing deck\r\n        this._deckService.updateDeck(this.deckId, newDeck)\r\n          .subscribe(response => {\r\n            if (response.success) {\r\n              this._router.navigate([\"/deck/\" + this.deckId]);\r\n            } else {\r\n              console.log(\"Deck update failed\");\r\n            }\r\n          });\r\n      } else {\r\n        // Create a new deck\r\n        this._route.params.subscribe(params => {\r\n          if (this.hasFolder) {\r\n            // Create deck in a specific folder\r\n            this._deckService.createDeckInFolder(params[\"id\"], newDeck)\r\n              .subscribe(response => {\r\n                if (response.success) {\r\n                  this._router.navigate([\"/folder/\" + params[\"id\"]]);\r\n                } else {\r\n                  console.log(\"Deck creation failed\");\r\n                }\r\n              });\r\n          } else {\r\n            // Create deck without a folder\r\n            this._deckService.createDeck(newDeck)\r\n              .subscribe(response => {\r\n                if (response.success) {\r\n                  if (newDeck.folderId == null) {\r\n                    this._router.navigate([\"/library\"]);\r\n                  } else {\r\n                    this._router.navigate([\"/folder/\" + newDeck.folderId]);\r\n                  }\r\n                } else {\r\n                  console.log(\"Deck creation failed\");\r\n                }\r\n              });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Method to handle folder selection visibility\r\n  createCheckFolderId() {\r\n    const folderSelection: HTMLElement | null = document.getElementById(\"folderSelect\");\r\n    if (folderSelection) {\r\n      if (this.hasFolder) {\r\n        folderSelection.style.display = \"none\";\r\n      }\r\n    }\r\n  }\r\n\r\n  // Method to navigate back to the deck or library\r\n  backToDecks() {\r\n    this._route.params.subscribe(params => {\r\n      const id = params[\"id\"];\r\n      if (id == \"null\") {\r\n        this._router.navigate([\"/library\"]);\r\n      } else {\r\n        this._router.navigate([\"/deck/\" + id]);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Method to fetch folders from the server\r\n  getFolders(): void {\r\n    this._folderService.getFolders()\r\n      .subscribe(data => {\r\n        this.folders = data;\r\n      });\r\n  }\r\n\r\n  // Lifecycle method called when the component is initialized\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      if (params[\"mode\"] === \"create\") {\r\n        this.isEditMode = false; // Create mode\r\n        this.hasFolder = params[\"id\"] !== \"null\";\r\n      } else if (params[\"mode\"] === \"update\") {\r\n        this.isEditMode = true; // Edit mode\r\n        this.deckId = +params[\"id\"];\r\n        this.loadItemForEdit(this.deckId);\r\n      }\r\n    });\r\n    this.getFolders();\r\n    this.createCheckFolderId();\r\n    this.validationDeck();\r\n  }\r\n\r\n  // Method to load a deck for editing\r\n  loadItemForEdit(deckId: number): void {\r\n    // Call the getDeckById method of the deck service to fetch deck details.\r\n    this._deckService.getDeckById(deckId)\r\n      .subscribe({\r\n        // Success callback (next): Invoked when deck details are successfully retrieved.\r\n        next: (deck: any) => {\r\n          // Update the deckForm with the retrieved deck details.\r\n          this.deckForm.patchValue({\r\n            deckName: deck.DeckName,\r\n            deckDescription: deck.DeckDescription,\r\n            folderSelection: deck.FolderId\r\n          });\r\n        },\r\n        // Error callback: Invoked when an error occurs during the fetch operation.\r\n        error: (error: any) => {\r\n          console.error(\"Error loading deck for edit: \", error);\r\n        }\r\n      });\r\n  }\r\n\r\n  // Method for deck name validation\r\n  validationDeck() {\r\n    const myInput: HTMLInputElement | null = document.getElementById(\"deckName\") as HTMLInputElement;\r\n    const validationDeck: HTMLElement | null = document.getElementById(\"validationDeck\");\r\n    if (validationDeck) {\r\n      validationDeck.style.display = \"none\";\r\n    }\r\n    if (myInput && validationDeck) {\r\n      myInput.addEventListener(\"input\", () => {\r\n        validationDeck.style.display = \"block\";\r\n      });\r\n      setTimeout(() => {\r\n        validationDeck.style.display = \"block\";\r\n      }, 10000);\r\n    }\r\n  }\r\n}\r\n","<section class=\"w-100 vh-100 mt-5 create-deck\">\r\n  <div class=\"container d-flex w-75 justify-content-between border border-1 p-0 shadow-sm bg-body rounded\">\r\n    <!-- Left section with quote and icon -->\r\n    <div class=\"d-none d-md-block text-center w-50\" style=\"background-color: #BCEAD5\">\r\n      <div class=\"p-5 mt-5\">\r\n        <i class=\"fas fa-book-open fa-9x mt-5 mb-4\" style=\"color: #8ec3b0;\"></i>\r\n        <figure>\r\n          <blockquote class=\"blockquote\">\r\n            <p> “An investment in knowledge pays the best interest. ”</p>\r\n          </blockquote>\r\n          <figcaption class=\"blockquote-footer\">\r\n            <cite title=\"Source Title\">Emil Magnussen</cite>\r\n          </figcaption>\r\n        </figure>\r\n      </div>\r\n    </div>\r\n    <!-- Right section for creating a new deck -->\r\n    <div class=\"p-5 w-100\">\r\n      <h2>{{isEditMode ? 'Update' : 'Create'}} Deck</h2>\r\n      <hr />\r\n      <!-- Form for creating a new deck -->\r\n      <form [formGroup]=\"deckForm\" (ngSubmit)=\"onSubmit()\">\r\n        <!-- Deck Name input field -->\r\n        <div class=\"form-outline mb-4\">\r\n          <label for=\"deckName\"></label>\r\n          <input id=\"deckName\" formControlName=\"deckName\" type=\"text\" class=\"form-control\" autocomplete=\"off\" placeholder=\"Input a deck name\" required />\r\n        </div>\r\n        <div id=\"validationDeck\">\r\n          <div *ngIf=\"deckForm.invalid\" class=\"text-danger\">\r\n            Write 2 - 15 characters long and do not use special character.\r\n          </div>\r\n        </div>\r\n        <!-- Folder selection dropdown -->\r\n        <div class=\"form-outline mb-4\" id=\"folderSelect\">\r\n          <label for=\"folderId\"></label>\r\n          <select id=\"folderId\" formControlName=\"folderId\" class=\"form-control\">\r\n            <option value=\"null\">none</option>\r\n            <option *ngFor=\"let folder of folders\" value=\"{{folder.FolderId}}\">{{folder.FolderName}}</option>\r\n          </select>\r\n        </div>\r\n        <!-- Deck Description textarea -->\r\n        <div class=\"form-outline mb-4\">\r\n          <label class=\"form-label\" for=\"deckDescription\"></label>\r\n          <textarea class=\"form-control\" id=\"deckDescription\" formControlName=\"deckDescription\" rows=\"4\" placeholder=\"Write something about your deck .....\"></textarea>\r\n        </div>\r\n        <!-- Submit and Cancel buttons -->\r\n        <div class=\"form-outline mb-4 d-flex justify-content-between\">\r\n          <button type=\"submit\" class=\"btn btn-success btn-block mb-1 me-1\"\r\n                  [disabled]=\"deckForm.invalid\">\r\n            <i class=\"fa-solid fa-check\"></i>\r\n          </button>\r\n          <a class=\"btn btn-secondary btn-block mb-1\"\r\n             (click)=\"backToDecks()\">\r\n            <i class=\"fa-solid fa-arrow-rotate-left\"></i>\r\n          </a>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</section>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}