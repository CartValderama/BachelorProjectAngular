{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/flashcard.service\";\nimport * as i4 from \"@angular/common\";\nfunction FlashcardformComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtext(1, \" Maximum 120 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FlashcardformComponent_div_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 23);\n    i0.ɵɵtext(1, \" Maximum 120 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class FlashcardformComponent {\n  // Constructor to initialize the form and inject services\n  constructor(_formbuilder, _router, _route, _flashcardService) {\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this._flashcardService = _flashcardService;\n    this.isEditMode = false;\n    this.flashcardId = -1;\n    this.deckId = -1;\n    this.flashcard = {\n      FlashcardId: 0,\n      Front: \"\",\n      Back: \"\",\n      CreationDate: \"\",\n      DeckId: 0\n    };\n    // Create the form with default values and validation rules\n    this.flashcardForm = _formbuilder.group({\n      front: [\"\", [Validators.required, Validators.maxLength(120)]],\n      back: [\"\", [Validators.required, Validators.maxLength(120)]],\n      deckId: null\n    });\n  }\n  // Method to fetch the deck ID based on the flashcard ID\n  getDeckId() {\n    this._flashcardService.getFlashcardById(this.flashcardId).subscribe(data => {\n      this.flashcard = data;\n      this.deckId = this.flashcard.DeckId;\n    });\n  }\n  // Method triggered on form submission\n  onSubmit() {\n    const newFlashcard = this.flashcardForm.value;\n    newFlashcard.deckId = this.deckId;\n    if (this.isEditMode) {\n      // Update existing flashcard\n      this._flashcardService.updateFlashcard(this.flashcardId, newFlashcard).subscribe(response => {\n        if (response.success) {\n          this._router.navigate([\"/deck/\" + this.deckId]);\n        } else {\n          console.log(\"Flashcard update failed\");\n        }\n      });\n    } else {\n      // Create a new flashcard\n      this._flashcardService.createFlashcard(this.deckId, newFlashcard).subscribe(response => {\n        if (response.success) {\n          this._router.navigate([\"/deck/\" + this.deckId]);\n        } else {\n          console.log(\"Flashcard creation failed\");\n        }\n      });\n    }\n  }\n  // Method to navigate back to the flashcards of the current deck\n  backToFlashcards() {\n    this._router.navigate([\"/deck/\" + this.deckId]);\n  }\n  // Lifecycle method called when the component is initialized\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      if (params[\"mode\"] === \"create\") {\n        this.deckId = params[\"id\"];\n        this.isEditMode = false; // Create mode\n      } else if (params[\"mode\"] === \"update\") {\n        this.flashcardId = params[\"id\"];\n        this.isEditMode = true; // Edit mode\n        this.loadItemForEdit(params[\"id\"]);\n        this.getDeckId();\n      }\n    });\n    this.validationFlashcard();\n  }\n  // Method to load a flashcard for editing\n  loadItemForEdit(flashcardId) {\n    // Call the getFlashcardById method of the flashcard service to fetch flashcard details.\n    this._flashcardService.getFlashcardById(flashcardId).subscribe({\n      // Success callback (next): Invoked when flashcard details are successfully retrieved.\n      next: flashcard => {\n        // Update the flashcardForm with the retrieved flashcard details.\n        this.flashcardForm.patchValue({\n          front: flashcard.Front,\n          back: flashcard.Back\n        });\n      },\n      // Error callback: Invoked when an error occurs during the fetch operation.\n      error: error => {\n        console.error(\"Error loading flashcard for edit: \", error);\n      }\n    });\n  }\n  // Method for flashcard validation\n  validationFlashcard() {\n    const front = document.getElementById(\"front\");\n    const back = document.getElementById(\"back\");\n    const validationFront = document.getElementById(\"validationFront\");\n    const validationBack = document.getElementById(\"validationBack\");\n    if (validationFront) {\n      validationFront.style.display = \"none\";\n    }\n    if (validationBack) {\n      validationBack.style.display = \"none\";\n    }\n    if (validationFront && front && validationBack && back) {\n      front.addEventListener(\"input\", () => {\n        validationFront.style.display = \"block\";\n      });\n      back.addEventListener(\"input\", () => {\n        validationBack.style.display = \"block\";\n      });\n      setTimeout(() => {\n        validationBack.style.display = \"block\";\n        validationFront.style.display = \"block\";\n      }, 10000);\n    }\n  }\n}\nFlashcardformComponent.ɵfac = function FlashcardformComponent_Factory(t) {\n  return new (t || FlashcardformComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.FlashcardService));\n};\nFlashcardformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FlashcardformComponent,\n  selectors: [[\"app-flashcard-flashcardform\"]],\n  decls: 35,\n  vars: 5,\n  consts: [[1, \"w-100\", \"vh-100\", \"mt-5\", \"create-flashcard\"], [1, \"container\", \"d-flex\", \"w-75\", \"justify-content-between\", \"border\", \"border-1\", \"p-0\", \"shadow-sm\", \"bg-body\", \"rounded\"], [1, \"d-none\", \"d-md-block\", \"text-center\", \"w-50\", 2, \"background-color\", \"#BCEAD5\"], [1, \"p-5\", \"mt-5\"], [1, \"fa-solid\", \"fa-graduation-cap\", \"fa-9x\", \"mt-4\", \"mb-4\", 2, \"color\", \"#8ec3b0\"], [1, \"blockquote\"], [1, \"blockquote-footer\"], [\"title\", \"Source Title\"], [1, \"p-5\", \"w-100\"], [1, \"d-flex\", \"flex-column\", \"justify-content-between\", \"h-75\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-outline\", \"mb-4\"], [\"for\", \"front\"], [\"id\", \"front\", \"formControlName\", \"front\", 1, \"form-control\"], [\"id\", \"validationFront\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"back\"], [\"id\", \"back\", \"formControlName\", \"back\", 1, \"form-control\"], [\"id\", \"validationBack\"], [1, \"d-flex\", \"justify-content-between\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", 3, \"disabled\"], [1, \"fa-solid\", \"fa-check\"], [1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"fa-solid\", \"fa-arrow-rotate-left\"], [1, \"text-danger\"]],\n  template: function FlashcardformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3);\n      i0.ɵɵelement(4, \"i\", 4);\n      i0.ɵɵelementStart(5, \"figure\")(6, \"blockquote\", 5)(7, \"p\");\n      i0.ɵɵtext(8, \" \\u201CEducation is the kindling of a flame, not the filling of a vessel.\\u201D\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"figcaption\", 6)(10, \"cite\", 7);\n      i0.ɵɵtext(11, \"Socrates \");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(12, \"div\", 8)(13, \"h2\");\n      i0.ɵɵtext(14);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(15, \"hr\");\n      i0.ɵɵelementStart(16, \"form\", 9);\n      i0.ɵɵlistener(\"ngSubmit\", function FlashcardformComponent_Template_form_ngSubmit_16_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(17, \"div\")(18, \"div\", 10)(19, \"label\", 11);\n      i0.ɵɵtext(20, \"Front:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(21, \"input\", 12);\n      i0.ɵɵelementStart(22, \"div\", 13);\n      i0.ɵɵtemplate(23, FlashcardformComponent_div_23_Template, 2, 0, \"div\", 14);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(24, \"div\", 10)(25, \"label\", 15);\n      i0.ɵɵtext(26, \"Back:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(27, \"input\", 16);\n      i0.ɵɵelementStart(28, \"div\", 17);\n      i0.ɵɵtemplate(29, FlashcardformComponent_div_29_Template, 2, 0, \"div\", 14);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(30, \"div\", 18)(31, \"button\", 19);\n      i0.ɵɵelement(32, \"i\", 20);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(33, \"a\", 21);\n      i0.ɵɵlistener(\"click\", function FlashcardformComponent_Template_a_click_33_listener() {\n        return ctx.backToFlashcards();\n      });\n      i0.ɵɵelement(34, \"i\", 22);\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      let tmp_2_0;\n      let tmp_3_0;\n      i0.ɵɵadvance(14);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Flashcard\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.flashcardForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx.flashcardForm.get(\"front\")) == null ? null : tmp_2_0.invalid);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx.flashcardForm.get(\"back\")) == null ? null : tmp_3_0.invalid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.flashcardForm.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","FlashcardformComponent","constructor","_formbuilder","_router","_route","_flashcardService","FlashcardId","Front","Back","CreationDate","DeckId","flashcardForm","group","front","required","maxLength","back","deckId","getDeckId","getFlashcardById","flashcardId","subscribe","data","flashcard","onSubmit","newFlashcard","value","isEditMode","updateFlashcard","response","success","navigate","console","log","createFlashcard","backToFlashcards","ngOnInit","params","loadItemForEdit","validationFlashcard","next","patchValue","error","document","getElementById","validationFront","validationBack","style","display","addEventListener","setTimeout","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\BachelorProject\\API\\ClientApp\\src\\app\\flashcard\\flashcardform.component.ts","C:\\Users\\elija\\source\\repos\\BachelorProject\\API\\ClientApp\\src\\app\\flashcard\\flashcardform.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { IFlashcard } from \"../models/flashcard\";\r\nimport { FlashcardService } from \"../services/flashcard.service\";\r\n\r\n@Component({\r\n  selector: \"app-flashcard-flashcardform\",\r\n  templateUrl: \"./flashcardform.component.html\"\r\n})\r\n\r\nexport class FlashcardformComponent implements OnInit {\r\n  // Component properties\r\n  flashcardForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  flashcardId: number = -1;\r\n  deckId: number = -1;\r\n  flashcard: IFlashcard = {\r\n    FlashcardId: 0,\r\n    Front: \"\",\r\n    Back: \"\",\r\n    CreationDate: \"\",\r\n    DeckId: 0\r\n  };\r\n\r\n  // Constructor to initialize the form and inject services\r\n  constructor(\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _route: ActivatedRoute,\r\n    private _flashcardService: FlashcardService\r\n  ) {\r\n    // Create the form with default values and validation rules\r\n    this.flashcardForm = _formbuilder.group({\r\n      front: [\"\", [\r\n        Validators.required,\r\n        Validators.maxLength(120)\r\n      ]],\r\n      back: [\"\", [\r\n        Validators.required,\r\n        Validators.maxLength(120)\r\n      ]],\r\n      deckId: null\r\n    });\r\n  }\r\n\r\n  // Method to fetch the deck ID based on the flashcard ID\r\n  getDeckId(): void {\r\n    this._flashcardService.getFlashcardById(this.flashcardId)\r\n      .subscribe(data => {\r\n        this.flashcard = data;\r\n        this.deckId = this.flashcard.DeckId;\r\n      });\r\n  }\r\n\r\n  // Method triggered on form submission\r\n  onSubmit() {\r\n    const newFlashcard = this.flashcardForm.value;\r\n    newFlashcard.deckId = this.deckId;\r\n\r\n    if (this.isEditMode) {\r\n      // Update existing flashcard\r\n      this._flashcardService.updateFlashcard(this.flashcardId, newFlashcard)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            this._router.navigate([\"/deck/\" + this.deckId]);\r\n          } else {\r\n            console.log(\"Flashcard update failed\");\r\n          }\r\n        });\r\n    } else {\r\n      // Create a new flashcard\r\n      this._flashcardService.createFlashcard(this.deckId, newFlashcard)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            this._router.navigate([\"/deck/\" + this.deckId]);\r\n          } else {\r\n            console.log(\"Flashcard creation failed\");\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  // Method to navigate back to the flashcards of the current deck\r\n  backToFlashcards() {\r\n    this._router.navigate([\"/deck/\" + this.deckId]);\r\n  }\r\n\r\n  // Lifecycle method called when the component is initialized\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      if (params[\"mode\"] === \"create\") {\r\n        this.deckId = params[\"id\"];\r\n        this.isEditMode = false; // Create mode\r\n      } else if (params[\"mode\"] === \"update\") {\r\n        this.flashcardId = params[\"id\"];\r\n        this.isEditMode = true; // Edit mode\r\n        this.loadItemForEdit(params[\"id\"]);\r\n        this.getDeckId();\r\n      }\r\n    });\r\n\r\n    this.validationFlashcard();\r\n  }\r\n\r\n  // Method to load a flashcard for editing\r\n  loadItemForEdit(flashcardId: number): void {\r\n    // Call the getFlashcardById method of the flashcard service to fetch flashcard details.\r\n    this._flashcardService.getFlashcardById(flashcardId)\r\n      .subscribe({\r\n        // Success callback (next): Invoked when flashcard details are successfully retrieved.\r\n        next: (flashcard: any) => {\r\n          // Update the flashcardForm with the retrieved flashcard details.\r\n          this.flashcardForm.patchValue({\r\n            front: flashcard.Front,\r\n            back: flashcard.Back\r\n          });\r\n        },\r\n        // Error callback: Invoked when an error occurs during the fetch operation.\r\n        error: (error: any) => {\r\n          console.error(\"Error loading flashcard for edit: \", error);\r\n        }\r\n      });\r\n  }\r\n\r\n  // Method for flashcard validation\r\n  validationFlashcard() {\r\n    const front: HTMLInputElement | null = document.getElementById(\"front\") as HTMLInputElement;\r\n    const back: HTMLInputElement | null = document.getElementById(\"back\") as HTMLInputElement;\r\n\r\n    const validationFront: HTMLElement | null = document.getElementById(\"validationFront\");\r\n    const validationBack: HTMLElement | null = document.getElementById(\"validationBack\");\r\n\r\n    if (validationFront) {\r\n      validationFront.style.display = \"none\";\r\n    }\r\n\r\n    if (validationBack) {\r\n      validationBack.style.display = \"none\";\r\n    }\r\n\r\n    if (validationFront && front && validationBack && back) {\r\n      front.addEventListener(\"input\", () => {\r\n        validationFront.style.display = \"block\";\r\n      });\r\n\r\n      back.addEventListener(\"input\", () => {\r\n        validationBack.style.display = \"block\";\r\n      });\r\n\r\n      setTimeout(() => {\r\n        validationBack.style.display = \"block\";\r\n        validationFront.style.display = \"block\";\r\n      }, 10000);\r\n    }\r\n  }\r\n}\r\n","<section class=\"w-100 vh-100 mt-5 create-flashcard\">\r\n  <!-- Container for creating a new flashcard -->\r\n  <div class=\"container d-flex w-75 justify-content-between border border-1 p-0 shadow-sm bg-body rounded\">\r\n    <!-- Left section with a quote and icon -->\r\n    <div class=\"d-none d-md-block text-center w-50\" style=\"background-color: #BCEAD5\">\r\n      <div class=\"p-5 mt-5\">\r\n        <i class=\"fa-solid fa-graduation-cap fa-9x mt-4 mb-4\" style=\"color: #8ec3b0;\"></i>\r\n        <figure>\r\n          <blockquote class=\"blockquote\">\r\n            <p> “Education is the kindling of a flame, not the filling of a vessel.”</p>\r\n          </blockquote>\r\n          <figcaption class=\"blockquote-footer\">\r\n            <cite title=\"Source Title\">Socrates </cite>\r\n          </figcaption>\r\n        </figure>\r\n      </div>\r\n    </div>\r\n    <!-- Right section for creating a new flashcard -->\r\n    <div class=\"p-5 w-100\">\r\n      <h2>{{isEditMode ? 'Update' : 'Create'}} Flashcard</h2>\r\n      <hr />\r\n      <form class=\"d-flex flex-column justify-content-between h-75\"\r\n            [formGroup]=\"flashcardForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div>\r\n          <div class=\"form-outline mb-4\">\r\n            <!-- Flashcard front input field -->\r\n            <label for=\"front\">Front:</label>\r\n            <input id=\"front\" formControlName=\"front\" class=\"form-control\" />\r\n            <div id=\"validationFront\">\r\n              <div *ngIf=\"flashcardForm.get('front')?.invalid\" class=\"text-danger\">\r\n                Maximum 120 characters\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"form-outline mb-4\">\r\n            <!-- Flashcard back input field -->\r\n            <label for=\"back\">Back:</label>\r\n            <input id=\"back\" formControlName=\"back\" class=\"form-control\" />\r\n            <div id=\"validationBack\">\r\n              <div *ngIf=\"flashcardForm.get('back')?.invalid\" class=\"text-danger\">\r\n                Maximum 120 characters\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"d-flex justify-content-between\">\r\n          <!-- Submit button -->\r\n          <button type=\"submit\" class=\"btn btn-success\"\r\n                  [disabled]=\"flashcardForm.invalid\">\r\n            <i class=\"fa-solid fa-check\"></i>\r\n          </button>\r\n          <!-- Return to deck dashboard button -->\r\n          <a class=\"btn btn-secondary\"\r\n             (click)=\"backToFlashcards()\">\r\n            <i class=\"fa-solid fa-arrow-rotate-left\"></i>\r\n          </a>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</section>\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}