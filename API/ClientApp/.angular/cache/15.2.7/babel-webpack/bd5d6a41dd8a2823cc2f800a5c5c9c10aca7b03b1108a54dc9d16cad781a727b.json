{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/folder.service\";\nimport * as i3 from \"../services/deck.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nconst _c0 = function (a1) {\n  return [\"/folder\", a1];\n};\nfunction LibraryComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 13)(2, \"div\", 14)(3, \"a\", 15);\n    i0.ɵɵelement(4, \"i\", 16);\n    i0.ɵɵelementStart(5, \"p\", 17);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const folder_r2 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(2, _c0, folder_r2.FolderId));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(folder_r2.FolderName);\n  }\n}\nconst _c1 = function (a1) {\n  return [\"/flashcardone/\", a1];\n};\nfunction LibraryComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 13)(2, \"div\", 14)(3, \"a\", 18);\n    i0.ɵɵelement(4, \"i\", 19);\n    i0.ɵɵelementStart(5, \"p\", 17);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()()()();\n  }\n  if (rf & 2) {\n    const deck_r3 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(2, _c1, deck_r3.DeckId));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(deck_r3.DeckName);\n  }\n}\nconst _c2 = function (a2) {\n  return [\"/folderform\", \"create\", a2];\n};\nconst _c3 = function () {\n  return [\"/deckform\", \"create\", null];\n};\nexport class LibraryComponent {\n  // Injecting the HttpClient service into the component\n  constructor(_router, _folderService, _deckService) {\n    this._router = _router;\n    this._folderService = _folderService;\n    this._deckService = _deckService;\n    this.viewTitle = \"Table\";\n    this._listFilter = \"\";\n    this.folders = [];\n    this.decks = [];\n    // Array to store filtered folders\n    this.filteredFolders = [];\n    // Array to store filtered decks\n    this.filteredDecks = [];\n  }\n  // Getter and Setter for listFilter property\n  get listFilter() {\n    return this._listFilter;\n  }\n  set listFilter(value) {\n    this._listFilter = value;\n    // Update filteredDecks and filteredFolders when listFilter changes\n    this.filteredDecks = this.performFilterDeck(value);\n    this.filteredFolders = this.performFilterFolder(value);\n  }\n  // Method to get folders from the server\n  getFolders() {\n    this._folderService.getFolders().subscribe(data => {\n      // Update folders and filteredFolders when data is received\n      this.folders = data;\n      this.filteredFolders = this.folders;\n    });\n  }\n  // Method to filter folders based on FolderName\n  performFilterFolder(filterBy) {\n    filterBy = filterBy.toLocaleLowerCase();\n    return this.folders.filter(folder => folder.FolderName.toLocaleLowerCase().includes(filterBy));\n  }\n  // Method to get decks from the server\n  getDecks() {\n    this._deckService.getDecks().subscribe(data => {\n      // Update decks and filteredDecks when data is received\n      this.decks = data;\n      let decksNoFolder = [];\n      // Filter decks without a folder\n      this.decks.forEach(function (deck) {\n        if (deck.FolderId == null) {\n          decksNoFolder.push(deck);\n        }\n      });\n      this.decks = decksNoFolder;\n      this.filteredDecks = this.decks;\n    });\n  }\n  // Method to filter decks based on DeckName\n  performFilterDeck(filterBy) {\n    filterBy = filterBy.toLocaleLowerCase();\n    return this.decks.filter(deck => deck.DeckName.toLocaleLowerCase().includes(filterBy));\n  }\n  // Initialize component\n  ngOnInit() {\n    // Call methods to get folders and decks when the component is initialized\n    this.getFolders();\n    this.getDecks();\n  }\n}\nLibraryComponent.ɵfac = function LibraryComponent_Factory(t) {\n  return new (t || LibraryComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.FolderService), i0.ɵɵdirectiveInject(i3.DeckService));\n};\nLibraryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LibraryComponent,\n  selectors: [[\"app-library-component\"]],\n  decls: 20,\n  vars: 8,\n  consts: [[1, \"container\", \"mb-5\"], [1, \"container\", \"d-flex\", \"justify-content-between\", \"align-items-center\", \"mt-5\"], [1, \"d-flex\"], [1, \"btn\", \"btn-secondary\", \"d-flex\", \"align-items-center\", \"me-2\", \"mb-0\", 3, \"routerLink\"], [1, \"d-none\", \"d-sm-block\", \"me-2\", \"mb-0\"], [1, \"fa-solid\", \"fa-folder-plus\"], [1, \"btn\", \"btn-success\", \"d-flex\", \"align-items-center\", 3, \"routerLink\"], [1, \"fa-solid\", \"fa-square-plus\"], [1, \"w-50\", \"mt-4\", \"mb-5\", 2, \"max-width\", \"15rem\"], [1, \"input-group\"], [\"type\", \"search\", \"placeholder\", \"search\", 1, \"form-control\", \"border\", \"rounded-pill\", 3, \"ngModel\", \"ngModelChange\"], [1, \"row\", \"row-cols-2\", \"row-cols-md-5\", \"row-cols-auto\", \"justify-content-start\", \"list-folderdeck\", \"mt-5\", \"mb-4\"], [4, \"ngFor\", \"ngForOf\"], [1, \"col\"], [1, \"row\", \"row-cols-2\", \"justify-content-center\"], [1, \"link-dark\", \"text-decoration-none\", \"p-2\", \"text-center\", 3, \"routerLink\"], [1, \"fa-solid\", \"fa-folder\", \"fa-5x\", \"test-shadow\", 2, \"color\", \"#8EC3B0\", \"text-shadow\", \"4px 4px 4px rgba(0, 0, 0, 0.2)\"], [1, \"m-0\"], [1, \"text-decoration-none\", \"icon-link-hover\", \"link-dark\", \"p-2\", \"text-center\", 3, \"routerLink\"], [1, \"fa-regular\", \"fa-square\", \"fa-5x\", 2, \"color\", \"green\", \"text-shadow\", \"4px 4px 4px rgba(0, 0, 0, 0.2)\"]],\n  template: function LibraryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"h1\");\n      i0.ɵɵtext(3, \"My Library\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"a\", 3)(6, \"p\", 4);\n      i0.ɵɵtext(7, \"Add Folder \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"i\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"a\", 6)(10, \"p\", 4);\n      i0.ɵɵtext(11, \"Add Deck \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"i\", 7);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(13, \"hr\");\n      i0.ɵɵelementStart(14, \"div\", 8)(15, \"div\", 9)(16, \"input\", 10);\n      i0.ɵɵlistener(\"ngModelChange\", function LibraryComponent_Template_input_ngModelChange_16_listener($event) {\n        return ctx.listFilter = $event;\n      });\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(17, \"div\", 11);\n      i0.ɵɵtemplate(18, LibraryComponent_div_18_Template, 7, 4, \"div\", 12);\n      i0.ɵɵtemplate(19, LibraryComponent_div_19_Template, 7, 4, \"div\", 12);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(5, _c2, -1));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(7, _c3));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngModel\", ctx.listFilter);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.filteredFolders);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.filteredDecks);\n    }\n  },\n  dependencies: [i4.NgForOf, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgModel, i1.RouterLink],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","LibraryComponent","constructor","_router","_folderService","_deckService","listFilter","_listFilter","value","filteredDecks","performFilterDeck","filteredFolders","performFilterFolder","getFolders","subscribe","data","folders","filterBy","toLocaleLowerCase","filter","folder","FolderName","includes","getDecks","decks","decksNoFolder","forEach","deck","FolderId","push","DeckName","ngOnInit","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\BachelorProject\\API\\ClientApp\\src\\app\\library\\library.component.html","C:\\Users\\elija\\source\\repos\\BachelorProject\\API\\ClientApp\\src\\app\\library\\library.component.ts"],"sourcesContent":["<section class=\"container mb-5\">\r\n  <!-- Container for library section -->\r\n  <div class=\"container d-flex justify-content-between align-items-center mt-5\">\r\n    <!-- Title for the library -->\r\n    <h1>My Library</h1>\r\n    <div class=\"d-flex\">\r\n      <!-- Buttons for adding a folder and a deck -->\r\n      <a class=\"btn btn-secondary d-flex align-items-center me-2 mb-0\"\r\n         [routerLink]=\"['/folderform', 'create', -1]\">\r\n        <p class=\"d-none d-sm-block me-2 mb-0\">Add Folder </p>\r\n        <i class=\"fa-solid fa-folder-plus\"></i>\r\n      </a>\r\n      <a class=\"btn btn-success d-flex align-items-center\"\r\n         [routerLink]=\"['/deckform', 'create', null]\">\r\n        <p class=\"d-none d-sm-block me-2 mb-0\">Add Deck </p>\r\n        <i class=\"fa-solid fa-square-plus\"></i>\r\n      </a>\r\n    </div>\r\n  </div>\r\n  <hr />\r\n  <div class=\"w-50 mt-4 mb-5\" style=\"max-width: 15rem;\">\r\n    <div class=\"input-group\">\r\n      <input class=\"form-control border rounded-pill\"\r\n             type=\"search\"\r\n             placeholder=\"search\"\r\n             [(ngModel)]=\"listFilter\" />\r\n    </div>\r\n  </div>\r\n  <div class=\"row row-cols-2 row-cols-md-5 row-cols-auto justify-content-start  list-folderdeck mt-5 mb-4\">\r\n    <!-- Loop through each folder in the model -->\r\n    <div *ngFor=\"let folder of filteredFolders\">\r\n      <div class=\"col\">\r\n        <div class=\"row row-cols-2 justify-content-center\">\r\n          <!-- Link to navigate to the folder dashboard -->\r\n          <a class=\"link-dark text-decoration-none p-2 text-center\"\r\n             [routerLink]=\"['/folder', folder.FolderId]\">\r\n            <i class=\"fa-solid fa-folder fa-5x test-shadow\" style=\"color: #8EC3B0; text-shadow: 4px 4px 4px rgba(0, 0, 0, 0.2); \"></i>\r\n            <p class=\"m-0\">{{ folder.FolderName }}</p>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Loop through each deck in the model -->\r\n    <div *ngFor=\"let deck of filteredDecks\">\r\n      <div class=\"col\">\r\n        <div class=\"row row-cols-2 justify-content-center\">\r\n          <!-- Link to start flashcards for the deck -->\r\n          <a class=\"text-decoration-none icon-link-hover link-dark p-2 text-center\"\r\n             [routerLink]=\"['/flashcardone/', deck.DeckId]\">\r\n            <i class=\"fa-regular fa-square fa-5x\" style=\"color: green; text-shadow: 4px 4px 4px rgba(0, 0, 0, 0.2);\"></i>\r\n            <p class=\"m-0\">{{ deck.DeckName }}</p>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { IFolder } from \"../models/folder\";\r\nimport { Router } from \"@angular/router\";\r\nimport { FolderService } from \"../services/folder.service\";\r\nimport { DeckService } from \"../services/deck.service\";\r\nimport { IDeck } from \"../models/deck\";\r\n\r\n\r\n@Component({\r\n  selector: \"app-library-component\",\r\n  templateUrl: \"./library.component.html\"\r\n})\r\n\r\nexport class LibraryComponent implements OnInit {\r\n  viewTitle: string = \"Table\";\r\n  private _listFilter: string = \"\";\r\n  folders: IFolder[] = [];\r\n  decks: IDeck[] = [];\r\n\r\n  // Injecting the HttpClient service into the component\r\n  constructor(\r\n    private _router: Router,\r\n    private _folderService: FolderService,\r\n    private _deckService: DeckService\r\n  ) { }\r\n\r\n  // Getter and Setter for listFilter property\r\n  get listFilter(): string {\r\n    return this._listFilter;\r\n  }\r\n  set listFilter(value: string) {\r\n    this._listFilter = value;\r\n    // Update filteredDecks and filteredFolders when listFilter changes\r\n    this.filteredDecks = this.performFilterDeck(value);\r\n    this.filteredFolders = this.performFilterFolder(value);\r\n  }\r\n\r\n  // Array to store filtered folders\r\n  filteredFolders: IFolder[] = [];\r\n\r\n  // Method to get folders from the server\r\n  getFolders(): void {\r\n    this._folderService.getFolders()\r\n      .subscribe(data => {\r\n        // Update folders and filteredFolders when data is received\r\n        this.folders = data;\r\n        this.filteredFolders = this.folders;\r\n      });\r\n  }\r\n\r\n  // Method to filter folders based on FolderName\r\n  performFilterFolder(filterBy: string): IFolder[] {\r\n    filterBy = filterBy.toLocaleLowerCase();\r\n    return this.folders.filter((folder: IFolder) =>\r\n      folder.FolderName.toLocaleLowerCase().includes(filterBy));\r\n  }\r\n\r\n  // Array to store filtered decks\r\n  filteredDecks: IDeck[] = [];\r\n\r\n  // Method to get decks from the server\r\n  getDecks(): void {\r\n    this._deckService.getDecks()\r\n      .subscribe(data => {\r\n        // Update decks and filteredDecks when data is received\r\n        this.decks = data;\r\n        let decksNoFolder: IDeck[] = [];\r\n        // Filter decks without a folder\r\n        this.decks.forEach(function (deck) {\r\n          if (deck.FolderId == null) {\r\n            decksNoFolder.push(deck);\r\n          }\r\n        })\r\n        this.decks = decksNoFolder;\r\n        this.filteredDecks = this.decks;\r\n      });\r\n  }\r\n\r\n  // Method to filter decks based on DeckName\r\n  performFilterDeck(filterBy: string): IDeck[] {\r\n    filterBy = filterBy.toLocaleLowerCase();\r\n    return this.decks.filter((deck: IDeck) =>\r\n      deck.DeckName.toLocaleLowerCase().includes(filterBy));\r\n  }\r\n\r\n  // Initialize component\r\n  ngOnInit(): void {\r\n    // Call methods to get folders and decks when the component is initialized\r\n    this.getFolders();\r\n    this.getDecks();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}