{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/flashcard.service\";\nimport * as i3 from \"../services/deck.service\";\nimport * as i4 from \"@angular/common\";\nfunction FlashcardtwoComponent_div_37_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 27);\n    i0.ɵɵlistener(\"click\", function FlashcardtwoComponent_div_37_Template_div_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const flashcard_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.checkFront(flashcard_r2));\n    });\n    i0.ɵɵelementStart(2, \"div\", 28);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const flashcard_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"id\", flashcard_r2.FlashcardId + \"_front\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", flashcard_r2.Front, \" \");\n  }\n}\nfunction FlashcardtwoComponent_div_40_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 27);\n    i0.ɵɵlistener(\"click\", function FlashcardtwoComponent_div_40_Template_div_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const flashcard_r5 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.checkBack(flashcard_r5));\n    });\n    i0.ɵɵelementStart(2, \"div\", 29);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const flashcard_r5 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"id\", flashcard_r5.FlashcardId + \"_back\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", flashcard_r5.Back, \" \");\n  }\n}\nconst _c0 = function (a1) {\n  return [\"/deck/\", a1];\n};\nconst _c1 = function (a1) {\n  return [\"/flashcardone/\", a1];\n};\nconst _c2 = function (a1) {\n  return [\"/flashcardtwo/\", a1];\n};\nconst _c3 = function (a1) {\n  return [\"/flashcardthree/\", a1];\n};\nexport class FlashcardtwoComponent {\n  constructor(_router, _route, _flashcardService, _deckService) {\n    this._router = _router;\n    this._route = _route;\n    this._flashcardService = _flashcardService;\n    this._deckService = _deckService;\n    this.decks = [];\n    this.randomFronts = [];\n    this.total = 0;\n    this.correctMatches = 0;\n    this.randomBacks = [];\n    this.frontStatus = false;\n    this.backStatus = false;\n    this.deck = {\n      DeckId: 0,\n      DeckName: \"\",\n      DeckDescription: \"\",\n      CreationDate: \"\",\n      FolderId: 0\n    };\n    this.flashcards = [];\n    this.flashcardFront = {\n      FlashcardId: 0,\n      Front: \"\",\n      Back: \"\",\n      CreationDate: \"\",\n      DeckId: 0\n    };\n    this.flashcardBack = {\n      FlashcardId: 0,\n      Front: \"\",\n      Back: \"\",\n      CreationDate: \"\",\n      DeckId: 0\n    };\n  }\n  // Function to update the CreationDate attribute to store only the date part\n  updateCreationDateDeck(deck) {\n    const datePart = deck.CreationDate.split('T')[0];\n    deck.CreationDate = datePart;\n    return deck;\n  }\n  getFlashcards(deckId) {\n    // call to the server with the url \"api/item/\", expected return type is an IFolder array. This is also an observable return by the get\n    this._flashcardService.getFlashcardsByDeckId(deckId).subscribe(data => {\n      this.flashcards = data;\n      this.randomFronts = this.shuffleFlashcard(this.flashcards);\n      this.randomBacks = this.shuffleFlashcard(this.flashcards);\n      this.flashcards.forEach(flashcard => {\n        this.total++;\n      });\n    });\n  }\n  getDecks(folderId) {\n    // call to the server with the url \"api/item/\", expected return type is an IFolder array. This is also an observable return by the get\n    this._deckService.getDecksByFolderId(folderId).subscribe(data => {\n      this.decks = data;\n      this.decks.forEach(deck => {\n        this.updateCreationDateDeck(deck);\n      });\n    });\n  }\n  // Method to retrieve deck information by ID\n  getDeck(deckId) {\n    this._deckService.getDeckById(deckId).subscribe(data => {\n      this.deck = data;\n      this.updateCreationDateDeck(this.deck);\n    });\n  }\n  // Method to shuffle an array (used for shuffling flashcards)\n  shuffleFlashcard(array) {\n    return array.slice().sort(() => Math.random() - 0.5);\n  }\n  // Method to highlight and check selected front in the flashcard game\n  checkFront(selectedFlashcard) {\n    // Reset styles for all fronts\n    const allFronts = document.querySelectorAll('.front');\n    this.frontStatus = true;\n    allFronts.forEach(front => {\n      front.style.background = \"lightblue\";\n    });\n    // Highlight the clicked front\n    const clickedFront = document.getElementById(selectedFlashcard.FlashcardId + \"_front\");\n    if (clickedFront) {\n      clickedFront.style.background = \"green\";\n    }\n    this.flashcardFront = selectedFlashcard;\n    // Check if both front and back have been selected\n    if (this.frontStatus && this.backStatus) {\n      this.checker();\n      this.frontStatus = false;\n      this.backStatus = false;\n    }\n  }\n  // Method to highlight and check selected back in the flashcard game\n  checkBack(selectedFlashcard) {\n    // Reset styles for all backs\n    const allBacks = document.querySelectorAll('.back');\n    this.backStatus = true;\n    allBacks.forEach(back => {\n      back.style.background = \"lightseagreen\";\n    });\n    // Highlight the clicked back\n    const clickedBack = document.getElementById(selectedFlashcard.FlashcardId + \"_back\");\n    if (clickedBack) {\n      clickedBack.style.background = \"green\";\n    }\n    this.flashcardBack = selectedFlashcard;\n    // Check if both front and back have been selected\n    if (this.frontStatus && this.backStatus) {\n      this.checker();\n      this.frontStatus = false;\n      this.backStatus = false;\n    }\n  }\n  // Method to check if the selected front and back match\n  checker() {\n    const front = document.getElementById(this.flashcardFront.FlashcardId + \"_front\");\n    const back = document.getElementById(this.flashcardBack.FlashcardId + \"_back\");\n    const progressBar = document.getElementById('progress-bar2');\n    const instruction = document.getElementById('ins');\n    // Check if the selected front and back match\n    if (this.flashcardFront.FlashcardId == this.flashcardBack.FlashcardId) {\n      front.style.display = 'none';\n      back.style.display = 'none';\n      // Display correct match message\n      instruction.innerHTML = \"Correct!!\";\n      setTimeout(() => {\n        instruction.innerHTML = \"Match the correct Fronts and Backs\";\n      }, 1000);\n      // Update progress bar\n      this.correctMatches++;\n      const maxMatches = this.total;\n      const progress = this.correctMatches / maxMatches * 100;\n      progressBar.style.width = progress + '%';\n      progressBar.setAttribute('aria-valuenow', progress + \"\");\n      // Display finish message if all matches are correct\n      if (this.correctMatches == maxMatches) {\n        const finishMessage = document.getElementById('game-finish-message');\n        finishMessage.style.display = 'block';\n      }\n    } else {\n      // Display wrong match message\n      instruction.innerHTML = \"WRONG MATCH\";\n      front.style.background = \"red\";\n      back.style.background = \"red\";\n      // Reset styles after a brief delay\n      setTimeout(() => {\n        back.style.background = 'lightseagreen';\n        front.style.background = \"lightblue\";\n      }, 200);\n      // Reset instruction message after a delay\n      setTimeout(() => {\n        instruction.innerHTML = \"Match the correct Fronts and Backs\";\n      }, 1000);\n    }\n  }\n  // Method to restart the flashcard matching game by reloading the page\n  restartMatch() {\n    location.reload();\n  }\n  // Method to navigate back to the deck or folder\n  return() {\n    if (this.deck.FolderId == null) {\n      this._router.navigate([\"/library\"]);\n    } else {\n      this._router.navigate([\"/folder/\" + this.deck.FolderId]);\n    }\n  }\n  // Lifecycle method called when the component is initialized\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      const id = this.deck.DeckId = +params[\"id\"];\n      this.getDeck(id);\n      this.getFlashcards(id);\n    });\n  }\n}\nFlashcardtwoComponent.ɵfac = function FlashcardtwoComponent_Factory(t) {\n  return new (t || FlashcardtwoComponent)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.FlashcardService), i0.ɵɵdirectiveInject(i3.DeckService));\n};\nFlashcardtwoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FlashcardtwoComponent,\n  selectors: [[\"app-flashcard-flashcardform\"]],\n  decls: 41,\n  vars: 15,\n  consts: [[1, \"container\", 2, \"margin-bottom\", \"10rem\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-end\", \"mt-5\"], [1, \"btn\", \"btn-secondary\", \"btn-block\", \"mb-1\", 3, \"click\"], [1, \"fa-solid\", \"fa-arrow-left-long\"], [1, \"m-0\"], [1, \"link-secondary\", \"text-decoration-none\", \"ms-2\", 3, \"routerLink\"], [1, \"fa-solid\", \"fa-gear\", \"fa-2x\"], [1, \"d-flex\", \"justify-content-center\", \"mt-5\"], [\"role\", \"group\", \"aria-label\", \"Basic example\", 1, \"btn-group\"], [1, \"btn\", \"btn-outline-secondary\", \"d-flex\", \"align-items-center\", 3, \"routerLink\"], [\"src\", \"assets/img/type1.png\", 2, \"width\", \"2rem\", \"margin-right\", \"5px\"], [1, \"m-0\", \"d-none\", \"d-md-block\"], [1, \"btn\", \"btn-outline-secondary\", \"d-flex\", \"align-items-center\", \"active\", 3, \"routerLink\"], [\"src\", \"assets/img/type2.png\", 2, \"width\", \"2.5rem\"], [\"src\", \"assets/img/type3.png\", 2, \"width\", \"2rem\"], [1, \"instruction\", \"mt-4\", \"p-3\"], [\"id\", \"ins\"], [1, \"container\"], [1, \"progress\", \"mt-3\"], [\"id\", \"progress-bar2\", \"role\", \"progressbar\", \"aria-valuenow\", \"0\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"progress-bar\", \"progress-bar-striped\", \"progress-bar-animated\", \"bg-success\", 2, \"width\", \"0%\"], [\"id\", \"game-finish-message\", 1, \"text-center\", \"mt-5\", 2, \"display\", \"none\"], [\"id\", \"restart\", \"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 2, \"width\", \"8rem\", 3, \"click\"], [1, \"d-flex\", \"justify-content-between\", \"mt-3\"], [1, \"d-flex\", \"flex-column\", \"align-items-center\", \"justify-content-center\", \"w-50\", \"text-center\", 2, \"word-break\", \"break-word\"], [1, \"row\", \"row-cols-1\", \"row-cols-md-2\", \"row-cols-lg-3\", \"g-2\", \"p-2\"], [4, \"ngFor\", \"ngForOf\"], [1, \"d-flex\", \"flex-column\", \"align-items-center\", \"w-50\", \"text-center\"], [1, \"col\", \"match-card\", 3, \"click\"], [1, \"front\", \"shadow-sm\", \"rounded-1\", \"w-100\", \"h-100\", \"user-select-none\", 3, \"id\"], [1, \"back\", \"shadow-sm\", \"rounded-1\", \"w-100\", \"h-100\", \"user-select-none\", 3, \"id\"]],\n  template: function FlashcardtwoComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"a\", 2);\n      i0.ɵɵlistener(\"click\", function FlashcardtwoComponent_Template_a_click_2_listener() {\n        return ctx.return();\n      });\n      i0.ɵɵelement(3, \"i\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"h1\", 4);\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"a\", 5);\n      i0.ɵɵelement(7, \"i\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(8, \"hr\");\n      i0.ɵɵelementStart(9, \"div\", 7)(10, \"div\", 8)(11, \"a\", 9);\n      i0.ɵɵelement(12, \"img\", 10);\n      i0.ɵɵelementStart(13, \"p\", 11);\n      i0.ɵɵtext(14, \"Default\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"a\", 12);\n      i0.ɵɵelement(16, \"img\", 13);\n      i0.ɵɵelementStart(17, \"p\", 11);\n      i0.ɵɵtext(18, \"Matching\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"a\", 9);\n      i0.ɵɵelement(20, \"img\", 14);\n      i0.ɵɵelementStart(21, \"p\", 11);\n      i0.ɵɵtext(22, \"GPT-Quiz\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(23, \"div\", 15)(24, \"p\", 16);\n      i0.ɵɵtext(25, \"Match the correct Fronts and Backs\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(26, \"div\", 17)(27, \"div\", 18);\n      i0.ɵɵelement(28, \"div\", 19);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"div\", 20)(30, \"h4\");\n      i0.ɵɵtext(31, \"Congratulations! You have completed the game.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(32, \"button\", 21);\n      i0.ɵɵlistener(\"click\", function FlashcardtwoComponent_Template_button_click_32_listener() {\n        return ctx.restartMatch();\n      });\n      i0.ɵɵtext(33, \" Restart \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(34, \"div\", 22)(35, \"div\", 23)(36, \"div\", 24);\n      i0.ɵɵtemplate(37, FlashcardtwoComponent_div_37_Template, 4, 2, \"div\", 25);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(38, \"div\", 26)(39, \"div\", 24);\n      i0.ɵɵtemplate(40, FlashcardtwoComponent_div_40_Template, 4, 2, \"div\", 25);\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵtextInterpolate(ctx.deck.DeckName);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(7, _c0, ctx.deck.DeckId));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(9, _c1, ctx.deck.DeckId));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(11, _c2, ctx.deck.DeckId));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(13, _c3, ctx.deck.DeckId));\n      i0.ɵɵadvance(18);\n      i0.ɵɵproperty(\"ngForOf\", ctx.randomFronts);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.randomBacks);\n    }\n  },\n  dependencies: [i4.NgForOf, i1.RouterLink],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","FlashcardtwoComponent","constructor","_router","_route","_flashcardService","_deckService","DeckId","DeckName","DeckDescription","CreationDate","FolderId","FlashcardId","Front","Back","updateCreationDateDeck","deck","datePart","split","getFlashcards","deckId","getFlashcardsByDeckId","subscribe","data","flashcards","randomFronts","shuffleFlashcard","randomBacks","forEach","flashcard","total","getDecks","folderId","getDecksByFolderId","decks","getDeck","getDeckById","array","slice","sort","Math","random","checkFront","selectedFlashcard","allFronts","document","querySelectorAll","frontStatus","front","style","background","clickedFront","getElementById","flashcardFront","backStatus","checker","checkBack","allBacks","back","clickedBack","flashcardBack","progressBar","instruction","display","innerHTML","setTimeout","correctMatches","maxMatches","progress","width","setAttribute","finishMessage","restartMatch","location","reload","return","navigate","ngOnInit","params","id","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\BachelorProject\\API\\ClientApp\\src\\app\\flashcard\\flashcardtwo.component.html","C:\\Users\\elija\\source\\repos\\BachelorProject\\API\\ClientApp\\src\\app\\flashcard\\flashcardtwo.component.ts"],"sourcesContent":["<section class=\"container\" style=\"margin-bottom: 10rem\">\r\n  <!-- Deck navigation and actions -->\r\n  <div class=\"d-flex justify-content-between align-items-end mt-5\">\r\n    <!-- Return to folder dashboard button -->\r\n    <a class=\"btn btn-secondary btn-block mb-1\"\r\n       (click)=\"return()\">\r\n      <i class=\"fa-solid fa-arrow-left-long\"></i>\r\n    </a>\r\n    <!-- Deck title -->\r\n    <h1 class=\"m-0\">{{deck.DeckName}}</h1>\r\n    <!-- Deck settings button -->\r\n    <a class=\"link-secondary text-decoration-none ms-2\"\r\n       [routerLink]=\"['/deck/', deck.DeckId]\">\r\n      <i class=\"fa-solid fa-gear fa-2x\"></i>\r\n    </a>\r\n  </div>\r\n  <hr />\r\n  <!-- Flashcard type selection buttons -->\r\n  <div class=\"d-flex justify-content-center mt-5\">\r\n    <div class=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n      <!-- Flashcard type one button -->\r\n      <a class=\"btn btn-outline-secondary d-flex align-items-center\"\r\n         [routerLink]=\"['/flashcardone/', deck.DeckId]\">\r\n        <img src=\"assets/img/type1.png\" style=\"width: 2rem; margin-right: 5px\" />\r\n        <p class=\"m-0 d-none d-md-block\">Default</p>\r\n      </a>\r\n      <!-- Flashcard type two button -->\r\n      <a class=\"btn btn-outline-secondary d-flex align-items-center active\"\r\n         [routerLink]=\"['/flashcardtwo/', deck.DeckId]\">\r\n        <img src=\"assets/img/type2.png\" style=\"width: 2.5rem;\"/>\r\n        <p class=\"m-0 d-none d-md-block\">Matching</p>\r\n      </a>\r\n      <a class=\"btn btn-outline-secondary d-flex align-items-center\"\r\n         [routerLink]=\"['/flashcardthree/', deck.DeckId]\">\r\n        <img src=\"assets/img/type3.png\" style=\"width: 2rem;\" />\r\n        <p class=\"m-0 d-none d-md-block\">GPT-Quiz</p>\r\n      </a>\r\n    </div>\r\n  </div>\r\n  <!-- Instructions -->\r\n  <div class=\"instruction mt-4 p-3\">\r\n    <p id=\"ins\">Match the correct Fronts and Backs</p>\r\n  </div>\r\n  <div class=\"container\">\r\n    <!-- Progress bar -->\r\n    <div class=\"progress mt-3\">\r\n      <div id=\"progress-bar2\" class=\"progress-bar progress-bar-striped progress-bar-animated bg-success\" role=\"progressbar\" style=\"width: 0%\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\r\n    </div>\r\n    <!-- Game finish message and restart button -->\r\n    <div id=\"game-finish-message\" class=\"text-center mt-5\" style=\"display: none;\">\r\n      <h4>Congratulations! You have completed the game.</h4>\r\n      <button id=\"restart\" class=\"btn btn-outline-secondary\" style=\"width:8rem;\" type=\"button\" (click)=\"restartMatch()\">\r\n        Restart\r\n      </button>\r\n    </div>\r\n    <!-- Match card and back card display -->\r\n    <div class=\"d-flex justify-content-between mt-3\">\r\n      <!-- Display match fronts -->\r\n      <div class=\"d-flex flex-column align-items-center justify-content-center w-50 text-center\" style=\"word-break: break-word\">\r\n        <div class=\"row row-cols-1 row-cols-md-2 row-cols-lg-3 g-2 p-2\">\r\n          <div *ngFor=\"let flashcard of randomFronts\">\r\n            <div class=\"col match-card\" (click)=\"checkFront(flashcard)\">\r\n              <div class=\"front shadow-sm rounded-1 w-100 h-100 user-select-none\" [id]=\"flashcard.FlashcardId + '_front'\">\r\n                {{flashcard.Front}}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Display match backs -->\r\n      <div class=\"d-flex flex-column align-items-center w-50 text-center\">\r\n        <div class=\"row row-cols-1 row-cols-md-2 row-cols-lg-3 g-2 p-2\">\r\n          <div *ngFor=\"let flashcard of randomBacks\">\r\n            <div class=\"col match-card\" (click)=\"checkBack(flashcard)\">\r\n              <div class=\"back shadow-sm rounded-1 w-100 h-100 user-select-none\" [id]=\"flashcard.FlashcardId + '_back'\">\r\n                {{flashcard.Back}}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { IDeck } from \"../models/deck\";\r\nimport { IFlashcard } from \"../models/flashcard\";\r\nimport { FlashcardService } from \"../services/flashcard.service\";\r\nimport { DeckService } from \"../services/deck.service\";\r\n\r\n@Component({\r\n  selector: \"app-flashcard-flashcardform\",\r\n  templateUrl: \"./flashcardtwo.component.html\"\r\n})\r\n\r\nexport class FlashcardtwoComponent implements OnInit {\r\n  decks: IDeck[] = [];\r\n  randomFronts: IFlashcard[] = []\r\n  total: number = 0;\r\n  correctMatches: number = 0;\r\n  randomBacks: IFlashcard[] = []\r\n  frontStatus: boolean = false;\r\n  backStatus: boolean = false;\r\n  deck: IDeck = {\r\n    DeckId: 0,\r\n    DeckName: \"\",\r\n    DeckDescription: \"\",\r\n    CreationDate: \"\",\r\n    FolderId: 0\r\n  };\r\n  flashcards: IFlashcard[] = []\r\n  flashcardFront: IFlashcard = {\r\n    FlashcardId: 0,\r\n    Front: \"\",\r\n    Back: \"\",\r\n    CreationDate: \"\",\r\n    DeckId: 0\r\n  }\r\n  flashcardBack: IFlashcard = {\r\n    FlashcardId: 0,\r\n    Front: \"\",\r\n    Back: \"\",\r\n    CreationDate: \"\",\r\n    DeckId: 0\r\n  }\r\n  constructor(\r\n    private _router: Router,\r\n    private _route: ActivatedRoute,\r\n    private _flashcardService: FlashcardService,\r\n    private _deckService: DeckService) {\r\n  }\r\n  // Function to update the CreationDate attribute to store only the date part\r\n  updateCreationDateDeck(deck: IDeck): IDeck {\r\n    const datePart = deck.CreationDate.split('T')[0];\r\n    deck.CreationDate = datePart;\r\n    return deck;\r\n  }\r\n\r\n  getFlashcards(deckId: number): void {\r\n    // call to the server with the url \"api/item/\", expected return type is an IFolder array. This is also an observable return by the get\r\n    this._flashcardService.getFlashcardsByDeckId(deckId)\r\n      .subscribe(data => { // subscribe() used to receive the data when the response is received\r\n        this.flashcards = data;\r\n        this.randomFronts = this.shuffleFlashcard(this.flashcards);\r\n        this.randomBacks = this.shuffleFlashcard(this.flashcards);\r\n        this.flashcards.forEach(flashcard => {\r\n          this.total++;\r\n        })\r\n      });\r\n  }\r\n\r\n  getDecks(folderId: number): void {\r\n    // call to the server with the url \"api/item/\", expected return type is an IFolder array. This is also an observable return by the get\r\n    this._deckService.getDecksByFolderId(folderId)\r\n      .subscribe(data => { // subscribe() used to receive the data when the response is received\r\n        this.decks = data;\r\n        this.decks.forEach(deck => {\r\n          this.updateCreationDateDeck(deck)\r\n        })\r\n      });\r\n  }\r\n\r\n  // Method to retrieve deck information by ID\r\n  getDeck(deckId: number): void {\r\n    this._deckService.getDeckById(deckId)\r\n      .subscribe(data => {\r\n        this.deck = data;\r\n        this.updateCreationDateDeck(this.deck);\r\n      });\r\n  }\r\n\r\n  // Method to shuffle an array (used for shuffling flashcards)\r\n  shuffleFlashcard<T>(array: T[]): T[] {\r\n    return array.slice().sort(() => Math.random() - 0.5);\r\n  }\r\n\r\n  // Method to highlight and check selected front in the flashcard game\r\n  checkFront(selectedFlashcard: IFlashcard): void {\r\n    // Reset styles for all fronts\r\n    const allFronts = document.querySelectorAll('.front') as NodeListOf<HTMLElement>;\r\n    this.frontStatus = true;\r\n    allFronts.forEach((front: HTMLElement) => {\r\n      front.style.background = \"lightblue\";\r\n    });\r\n\r\n    // Highlight the clicked front\r\n    const clickedFront = document.getElementById(selectedFlashcard.FlashcardId + \"_front\") as HTMLElement;\r\n    if (clickedFront) {\r\n      clickedFront.style.background = \"green\";\r\n    }\r\n    this.flashcardFront = selectedFlashcard;\r\n\r\n    // Check if both front and back have been selected\r\n    if (this.frontStatus && this.backStatus) {\r\n      this.checker();\r\n      this.frontStatus = false;\r\n      this.backStatus = false;\r\n    }\r\n  }\r\n\r\n  // Method to highlight and check selected back in the flashcard game\r\n  checkBack(selectedFlashcard: IFlashcard): void {\r\n    // Reset styles for all backs\r\n    const allBacks = document.querySelectorAll('.back') as NodeListOf<HTMLElement>;\r\n    this.backStatus = true;\r\n    allBacks.forEach((back: HTMLElement) => {\r\n      back.style.background = \"lightseagreen\";\r\n    });\r\n\r\n    // Highlight the clicked back\r\n    const clickedBack = document.getElementById(selectedFlashcard.FlashcardId + \"_back\") as HTMLElement;\r\n    if (clickedBack) {\r\n      clickedBack.style.background = \"green\";\r\n    }\r\n    this.flashcardBack = selectedFlashcard;\r\n\r\n    // Check if both front and back have been selected\r\n    if (this.frontStatus && this.backStatus) {\r\n      this.checker();\r\n      this.frontStatus = false;\r\n      this.backStatus = false;\r\n    }\r\n  }\r\n\r\n  // Method to check if the selected front and back match\r\n  checker(): void {\r\n    const front = document.getElementById(this.flashcardFront.FlashcardId + \"_front\") as HTMLElement;\r\n    const back = document.getElementById(this.flashcardBack.FlashcardId + \"_back\") as HTMLElement;\r\n    const progressBar = document.getElementById('progress-bar2') as HTMLElement;\r\n    const instruction = document.getElementById('ins') as HTMLElement;\r\n\r\n    // Check if the selected front and back match\r\n    if (this.flashcardFront.FlashcardId == this.flashcardBack.FlashcardId) {\r\n      front.style.display = 'none';\r\n      back.style.display = 'none';\r\n\r\n      // Display correct match message\r\n      instruction.innerHTML = \"Correct!!\";\r\n      setTimeout(() => {\r\n        instruction.innerHTML = \"Match the correct Fronts and Backs\";\r\n      }, 1000);\r\n\r\n      // Update progress bar\r\n      this.correctMatches++;\r\n      const maxMatches = this.total;\r\n      const progress = (this.correctMatches / maxMatches) * 100;\r\n      progressBar.style.width = progress + '%';\r\n      progressBar.setAttribute('aria-valuenow', progress + \"\");\r\n\r\n      // Display finish message if all matches are correct\r\n      if (this.correctMatches == maxMatches) {\r\n        const finishMessage = document.getElementById('game-finish-message') as HTMLElement;\r\n        finishMessage.style.display = 'block';\r\n      }\r\n    } else {\r\n      // Display wrong match message\r\n      instruction.innerHTML = \"WRONG MATCH\";\r\n      front.style.background = \"red\";\r\n      back.style.background = \"red\";\r\n\r\n      // Reset styles after a brief delay\r\n      setTimeout(() => {\r\n        back.style.background = 'lightseagreen';\r\n        front.style.background = \"lightblue\";\r\n      }, 200);\r\n\r\n      // Reset instruction message after a delay\r\n      setTimeout(() => {\r\n        instruction.innerHTML = \"Match the correct Fronts and Backs\";\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  // Method to restart the flashcard matching game by reloading the page\r\n  restartMatch() {\r\n    location.reload();\r\n  }\r\n\r\n  // Method to navigate back to the deck or folder\r\n  return() {\r\n    if (this.deck.FolderId == null) {\r\n      this._router.navigate([\"/library\"]);\r\n    } else {\r\n      this._router.navigate([\"/folder/\" + this.deck.FolderId]);\r\n    }\r\n  }\r\n\r\n  // Lifecycle method called when the component is initialized\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      const id = this.deck.DeckId = + params[\"id\"];\r\n      this.getDeck(id);\r\n      this.getFlashcards(id);\r\n    });\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}