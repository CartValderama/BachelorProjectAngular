{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DeckService {\n  constructor(_http) {\n    this._http = _http;\n    this.baseUrl = \"api/deck/\";\n  }\n  // Get all decks\n  getDecks() {\n    return this._http.get(this.baseUrl);\n  }\n  // Get decks by folder ID\n  getDecksByFolderId(folderId) {\n    const url = `${this.baseUrl}/byfolder/${folderId}`;\n    return this._http.get(url);\n  }\n  // Get deck by deck ID\n  getDeckById(deckId) {\n    const url = `${this.baseUrl}/${deckId}`;\n    return this._http.get(url);\n  }\n  // Create a new deck\n  createDeck(newDeck) {\n    const createUrl = `${this.baseUrl}/create`;\n    return this._http.post(createUrl, newDeck);\n  }\n  // Create a new deck in a specific folder\n  createDeckInFolder(folderId, newDeck) {\n    const createUrl = `${this.baseUrl}/create/${folderId}`;\n    return this._http.post(createUrl, newDeck);\n  }\n  // Update an existing deck\n  updateDeck(deckId, newDeck) {\n    const url = `${this.baseUrl}/update/${deckId}`;\n    newDeck.DeckId = deckId;\n    return this._http.put(url, newDeck);\n  }\n  // Delete a deck by deck ID\n  deleteItem(deckId) {\n    const url = `${this.baseUrl}/delete/${deckId}`;\n    return this._http.delete(url);\n  }\n}\nDeckService.ɵfac = function DeckService_Factory(t) {\n  return new (t || DeckService)(i0.ɵɵinject(i1.HttpClient));\n};\nDeckService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DeckService,\n  factory: DeckService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":";;AASA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,KAAiB;IAAjB,UAAK,GAALA,KAAK;IADjB,YAAO,GAAG,WAAW;EACY;EAEzC;EACAC,QAAQ;IACN,OAAO,IAAI,CAACD,KAAK,CAACE,GAAG,CAAU,IAAI,CAACC,OAAO,CAAC;EAC9C;EAEA;EACAC,kBAAkB,CAACC,QAAgB;IACjC,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,aAAaE,QAAQ,EAAE;IAClD,OAAO,IAAI,CAACL,KAAK,CAACE,GAAG,CAAUI,GAAG,CAAC;EACrC;EAEA;EACAC,WAAW,CAACC,MAAc;IACxB,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,IAAIK,MAAM,EAAE;IACvC,OAAO,IAAI,CAACR,KAAK,CAACE,GAAG,CAACI,GAAG,CAAC;EAC5B;EAEA;EACAG,UAAU,CAACC,OAAc;IACvB,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACR,OAAO,SAAS;IAC1C,OAAO,IAAI,CAACH,KAAK,CAACY,IAAI,CAAMD,SAAS,EAAED,OAAO,CAAC;EACjD;EAEA;EACAG,kBAAkB,CAACR,QAAgB,EAAEK,OAAc;IACjD,MAAMC,SAAS,GAAG,GAAG,IAAI,CAACR,OAAO,WAAWE,QAAQ,EAAE;IACtD,OAAO,IAAI,CAACL,KAAK,CAACY,IAAI,CAAMD,SAAS,EAAED,OAAO,CAAC;EACjD;EAEA;EACAI,UAAU,CAACN,MAAc,EAAEE,OAAY;IACrC,MAAMJ,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,WAAWK,MAAM,EAAE;IAC9CE,OAAO,CAACK,MAAM,GAAGP,MAAM;IACvB,OAAO,IAAI,CAACR,KAAK,CAACgB,GAAG,CAAMV,GAAG,EAAEI,OAAO,CAAC;EAC1C;EAEA;EACAO,UAAU,CAACT,MAAc;IACvB,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACH,OAAO,WAAWK,MAAM,EAAE;IAC9C,OAAO,IAAI,CAACR,KAAK,CAACkB,MAAM,CAACZ,GAAG,CAAC;EAC/B;;AA5CWR,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAHV;AAAM","names":["DeckService","constructor","_http","getDecks","get","baseUrl","getDecksByFolderId","folderId","url","getDeckById","deckId","createDeck","newDeck","createUrl","post","createDeckInFolder","updateDeck","DeckId","put","deleteItem","delete","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\BachelorProject\\API\\ClientApp\\src\\app\\services\\deck.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\nimport { IDeck } from \"../models/deck\";\r\n\r\n@Injectable({\r\n  providedIn: \"root\"\r\n})\r\n\r\nexport class DeckService {\r\n  private baseUrl = \"api/deck/\";\r\n  constructor(private _http: HttpClient) { }\r\n\r\n  // Get all decks\r\n  getDecks(): Observable<IDeck[]> {\r\n    return this._http.get<IDeck[]>(this.baseUrl);\r\n  }\r\n\r\n  // Get decks by folder ID\r\n  getDecksByFolderId(folderId: number): Observable<IDeck[]> {\r\n    const url = `${this.baseUrl}/byfolder/${folderId}`;\r\n    return this._http.get<IDeck[]>(url);\r\n  }\r\n\r\n  // Get deck by deck ID\r\n  getDeckById(deckId: number): Observable<any> {\r\n    const url = `${this.baseUrl}/${deckId}`;\r\n    return this._http.get(url);\r\n  }\r\n\r\n  // Create a new deck\r\n  createDeck(newDeck: IDeck): Observable<any> {\r\n    const createUrl = `${this.baseUrl}/create`;\r\n    return this._http.post<any>(createUrl, newDeck);\r\n  }\r\n\r\n  // Create a new deck in a specific folder\r\n  createDeckInFolder(folderId: number, newDeck: IDeck): Observable<any> {\r\n    const createUrl = `${this.baseUrl}/create/${folderId}`;\r\n    return this._http.post<any>(createUrl, newDeck);\r\n  }\r\n\r\n  // Update an existing deck\r\n  updateDeck(deckId: number, newDeck: any): Observable<any> {\r\n    const url = `${this.baseUrl}/update/${deckId}`;\r\n    newDeck.DeckId = deckId;\r\n    return this._http.put<any>(url, newDeck);\r\n  }\r\n\r\n  // Delete a deck by deck ID\r\n  deleteItem(deckId: number): Observable<any> {\r\n    const url = `${this.baseUrl}/delete/${deckId}`;\r\n    return this._http.delete(url);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}