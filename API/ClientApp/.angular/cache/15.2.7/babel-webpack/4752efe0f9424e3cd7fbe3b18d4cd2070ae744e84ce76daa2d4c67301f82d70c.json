{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/folder.service\";\nimport * as i4 from \"@angular/common\";\nfunction FolderformComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵtext(1, \" Write 2 - 15 characters long and do not use special character. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class FolderformComponent {\n  constructor(_formbuilder, _router, _route, _folderService) {\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this._folderService = _folderService;\n    this.isEditMode = false;\n    this.folderId = -1;\n    // Initialize folderForm with form controls and validators\n    this.folderForm = _formbuilder.group({\n      folderName: [\"\", [Validators.required, Validators.minLength(2), Validators.maxLength(100), Validators.pattern(/^[0-9a-zA-ZæøåÆØÅ. -]{2,100}$/)]],\n      folderDescription: [\"\", [Validators.maxLength(150)]]\n    });\n  }\n  // Handle form submission\n  onSubmit() {\n    const newFolder = this.folderForm.value;\n    if (this.isEditMode) {\n      // Update existing folder\n      this._folderService.updateFolder(this.folderId, newFolder).subscribe(response => {\n        if (response.success) {\n          console.log(\"Folder updated successfully\");\n          this._router.navigate([\"/folder/\" + this.folderId]);\n        } else {\n          console.log(\"Folder update failed\");\n        }\n      });\n    } else {\n      // Create a new folder\n      this._folderService.createFolder(newFolder).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate([\"/library\"]);\n        } else {\n          console.log(\"Folder creation failed\");\n        }\n      });\n    }\n  }\n  // Navigate back to folders based on the edit mode\n  backToFolders() {\n    if (this.isEditMode) {\n      this._router.navigate([\"/folder/\" + this.folderId]);\n    } else {\n      this._router.navigate([\"/library\"]);\n    }\n  }\n  // Initialize component\n  ngOnInit() {\n    this._route.params.subscribe(params => {\n      // Check the mode parameter to determine whether it's in create or update mode\n      if (params[\"mode\"] === \"create\") {\n        this.isEditMode = false; // Create mode\n      } else if (params[\"mode\"] === \"update\") {\n        this.isEditMode = true; // Edit mode\n        this.folderId = +params[\"id\"];\n        this.loadItemForEdit(this.folderId);\n      }\n    });\n    // Perform folder form validation\n    this.validationFolder();\n  }\n  loadItemForEdit(folderId) {\n    // Call the getFolderById method of the folder service to fetch folder details.\n    this._folderService.getFolderById(folderId).subscribe({\n      // Success callback (next): Invoked when folder details are successfully retrieved.\n      next: folder => {\n        // Update the folderForm with the retrieved folder details.\n        this.folderForm.patchValue({\n          folderName: folder.FolderName,\n          folderDescription: folder.FolderDescription\n        });\n      },\n      // Error callback: Invoked when an error occurs during the fetch operation.\n      error: error => {\n        console.error(\"Error loading folder for edit: \", error);\n      }\n    });\n  }\n  validationFolder() {\n    const myInput = document.getElementById(\"folderName\");\n    const validatationFolder = document.getElementById(\"validatationFolder\");\n    if (validatationFolder) {\n      validatationFolder.style.display = \"none\";\n    }\n    if (myInput && validatationFolder) {\n      myInput.addEventListener(\"input\", () => {\n        validatationFolder.style.display = \"block\";\n      });\n      setTimeout(() => {\n        validatationFolder.style.display = \"block\";\n      }, 10000);\n    }\n  }\n}\nFolderformComponent.ɵfac = function FolderformComponent_Factory(t) {\n  return new (t || FolderformComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.FolderService));\n};\nFolderformComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FolderformComponent,\n  selectors: [[\"app-folder-folderform\"]],\n  decls: 30,\n  vars: 4,\n  consts: [[1, \"w-100\", \"vh-100\", \"mt-5\", \"create-folder\"], [1, \"container\", \"d-flex\", \"w-75\", \"justify-content-between\", \"border\", \"border-1\", \"p-0\", \"shadow-sm\", \"bg-body\", \"rounded\"], [1, \"p-5\", \"w-100\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-outline\", \"mb-4\"], [\"for\", \"folderName\", 1, \"form-label\"], [\"id\", \"folderName\", \"formControlName\", \"folderName\", \"type\", \"text\", \"autocomplete\", \"off\", \"placeholder\", \"Input a folder name\", 1, \"form-control\"], [\"id\", \"validatationFolder\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"for\", \"folderDescription\", 1, \"form-label\"], [\"id\", \"folderDescription\", \"formControlName\", \"folderDescription\", \"rows\", \"4\", \"placeholder\", \"Write something about your folder .....\", 1, \"form-control\"], [1, \"form-outline\", \"mb-4\", \"d-flex\", \"justify-content-between\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"btn-block\", \"mb-1\", \"me-1\", 3, \"disabled\"], [1, \"fa-solid\", \"fa-check\"], [1, \"btn\", \"btn-secondary\", \"btn-block\", \"mb-1\", 3, \"click\"], [1, \"fa-solid\", \"fa-arrow-rotate-left\"], [1, \"d-none\", \"d-md-block\", \"text-center\", \"w-50\", 2, \"background-color\", \"#BCEAD5\"], [1, \"p-5\"], [1, \"fa-solid\", \"fa-folder-open\", \"fa-9x\", \"mt-5\", \"mb-3\", 2, \"color\", \"#8EC3B0\"], [1, \"blockquote\"], [1, \"blockquote-footer\"], [\"title\", \"Source Title\"], [1, \"text-danger\"]],\n  template: function FolderformComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"section\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h2\");\n      i0.ɵɵtext(4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"hr\");\n      i0.ɵɵelementStart(6, \"form\", 3);\n      i0.ɵɵlistener(\"ngSubmit\", function FolderformComponent_Template_form_ngSubmit_6_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(7, \"div\", 4);\n      i0.ɵɵelement(8, \"label\", 5)(9, \"input\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 7);\n      i0.ɵɵtemplate(11, FolderformComponent_div_11_Template, 2, 0, \"div\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"div\", 4);\n      i0.ɵɵelement(13, \"label\", 9)(14, \"textarea\", 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 11)(16, \"button\", 12);\n      i0.ɵɵelement(17, \"i\", 13);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"a\", 14);\n      i0.ɵɵlistener(\"click\", function FolderformComponent_Template_a_click_18_listener() {\n        return ctx.backToFolders();\n      });\n      i0.ɵɵelement(19, \"i\", 15);\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(20, \"div\", 16)(21, \"div\", 17);\n      i0.ɵɵelement(22, \"i\", 18);\n      i0.ɵɵelementStart(23, \"figure\")(24, \"blockquote\", 19)(25, \"p\");\n      i0.ɵɵtext(26, \" \\u201CClutter is nothing more than postponed decisions.\\u201D\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(27, \"figcaption\", 20)(28, \"cite\", 21);\n      i0.ɵɵtext(29, \"Barbara Hemphill\");\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Create\", \" Folder\");\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.folderForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.folderForm.invalid);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"disabled\", ctx.folderForm.invalid);\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","FolderformComponent","constructor","_formbuilder","_router","_route","_folderService","folderForm","group","folderName","required","minLength","maxLength","pattern","folderDescription","onSubmit","newFolder","value","isEditMode","updateFolder","folderId","subscribe","response","success","console","log","navigate","createFolder","message","backToFolders","ngOnInit","params","loadItemForEdit","validationFolder","getFolderById","next","folder","patchValue","FolderName","FolderDescription","error","myInput","document","getElementById","validatationFolder","style","display","addEventListener","setTimeout","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\elija\\source\\repos\\BachelorProject\\API\\ClientApp\\src\\app\\folder\\folderform.component.ts","C:\\Users\\elija\\source\\repos\\BachelorProject\\API\\ClientApp\\src\\app\\folder\\folderform.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport { FolderService } from \"../services/folder.service\";\r\n\r\n@Component({\r\n  selector: \"app-folder-folderform\",\r\n  templateUrl: \"./folderform.component.html\"\r\n})\r\n\r\nexport class FolderformComponent {\r\n   folderForm: FormGroup;\r\n  isEditMode: boolean = false;\r\n  folderId: number = -1;\r\n\r\n  constructor(\r\n    private _formbuilder: FormBuilder,\r\n    private _router: Router,\r\n    private _route: ActivatedRoute,\r\n    private _folderService: FolderService\r\n  ) {\r\n    // Initialize folderForm with form controls and validators\r\n    this.folderForm = _formbuilder.group({\r\n      folderName: [\"\", [\r\n        Validators.required,\r\n        Validators.minLength(2),\r\n        Validators.maxLength(100),\r\n        Validators.pattern(/^[0-9a-zA-ZæøåÆØÅ. -]{2,100}$/)\r\n      ]],\r\n      folderDescription: [\"\", [Validators.maxLength(150)]],\r\n    });\r\n  }\r\n\r\n  // Handle form submission\r\n  onSubmit() {\r\n    const newFolder = this.folderForm.value;\r\n    if (this.isEditMode) {\r\n      // Update existing folder\r\n      this._folderService.updateFolder(this.folderId, newFolder)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(\"Folder updated successfully\");\r\n            this._router.navigate([\"/folder/\" + this.folderId]);\r\n          } else {\r\n            console.log(\"Folder update failed\");\r\n          }\r\n        });\r\n    } else {\r\n      // Create a new folder\r\n      this._folderService.createFolder(newFolder)\r\n        .subscribe(response => {\r\n          if (response.success) {\r\n            console.log(response.message);\r\n            this._router.navigate([\"/library\"]);\r\n          } else {\r\n            console.log(\"Folder creation failed\");\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  // Navigate back to folders based on the edit mode\r\n  backToFolders() {\r\n    if (this.isEditMode) {\r\n      this._router.navigate([\"/folder/\" + this.folderId]);\r\n    } else {\r\n      this._router.navigate([\"/library\"]);\r\n    }\r\n  }\r\n\r\n  // Initialize component\r\n  ngOnInit(): void {\r\n    this._route.params.subscribe(params => {\r\n      // Check the mode parameter to determine whether it's in create or update mode\r\n      if (params[\"mode\"] === \"create\") {\r\n        this.isEditMode = false; // Create mode\r\n      } else if (params[\"mode\"] === \"update\") {\r\n        this.isEditMode = true; // Edit mode\r\n        this.folderId = +params[\"id\"];\r\n        this.loadItemForEdit(this.folderId);\r\n      }\r\n    });\r\n    // Perform folder form validation\r\n    this.validationFolder();\r\n  }\r\n\r\n  loadItemForEdit(folderId: number): void {\r\n    // Call the getFolderById method of the folder service to fetch folder details.\r\n    this._folderService.getFolderById(folderId)\r\n      .subscribe({\r\n        // Success callback (next): Invoked when folder details are successfully retrieved.\r\n        next: (folder: any) => {\r\n          // Update the folderForm with the retrieved folder details.\r\n          this.folderForm.patchValue({\r\n            folderName: folder.FolderName,\r\n            folderDescription: folder.FolderDescription\r\n          });\r\n        },\r\n        // Error callback: Invoked when an error occurs during the fetch operation.\r\n        error: (error: any) => {\r\n          console.error(\"Error loading folder for edit: \", error);\r\n        }\r\n      });\r\n  }\r\n\r\n  validationFolder() {\r\n    const myInput: HTMLInputElement | null = document.getElementById(\"folderName\") as HTMLInputElement;\r\n    const validatationFolder: HTMLElement | null = document.getElementById(\"validatationFolder\");\r\n    if (validatationFolder) {\r\n      validatationFolder.style.display = \"none\";\r\n    }\r\n\r\n    if (myInput && validatationFolder) {\r\n      myInput.addEventListener(\"input\", () => {\r\n        validatationFolder.style.display = \"block\"\r\n      });\r\n      setTimeout(() => {\r\n        validatationFolder.style.display = \"block\";\r\n      }, 10000);\r\n    }\r\n  }\r\n}\r\n","<section class=\"w-100 vh-100 mt-5 create-folder\">\r\n  <!-- Container for the create folder section -->\r\n  <div class=\"container d-flex w-75 justify-content-between border border-1 p-0 shadow-sm bg-body rounded\">\r\n    <!-- Right section for creating a new folder -->\r\n    <div class=\"p-5 w-100\">\r\n      <h2>{{isEditMode ? 'Update' : 'Create'}} Folder</h2>\r\n      <hr />\r\n      <form [formGroup]=\"folderForm\" (ngSubmit)=\"onSubmit()\">\r\n        <!-- Input field for FolderName -->\r\n        <div class=\"form-outline mb-4\">\r\n          <label for=\"folderName\" class=\"form-label\"></label>\r\n          <input id=\"folderName\" formControlName=\"folderName\" type=\"text\" class=\"form-control\" autocomplete=\"off\" placeholder=\"Input a folder name\" />\r\n        </div>\r\n        <div id=\"validatationFolder\">\r\n          <div *ngIf=\"folderForm.invalid\" class=\"text-danger\">\r\n            Write 2 - 15 characters long and do not use special character.\r\n          </div>\r\n        </div>\r\n        <!-- Textarea for FolderDescription -->\r\n        <div class=\"form-outline mb-4\">\r\n          <label class=\"form-label\" for=\"folderDescription\"></label>\r\n          <textarea class=\"form-control\" id=\"folderDescription\" formControlName=\"folderDescription\" rows=\"4\" placeholder=\"Write something about your folder .....\"></textarea>\r\n        </div>\r\n        <!-- Submit and Return buttons -->\r\n        <div class=\"form-outline mb-4 d-flex justify-content-between\">\r\n          <button type=\"submit\" class=\"btn btn-success btn-block mb-1 me-1\"\r\n                  [disabled]=\"folderForm.invalid\">\r\n            <i class=\"fa-solid fa-check\"></i>\r\n          </button>\r\n\r\n          <a class=\"btn btn-secondary btn-block mb-1\"\r\n             (click)=\"backToFolders()\">\r\n            <i class=\"fa-solid fa-arrow-rotate-left\"></i>\r\n          </a>\r\n        </div>\r\n      </form>\r\n    </div>\r\n    <!-- Left section with background color and quote -->\r\n    <div class=\"d-none d-md-block text-center w-50\" style=\"background-color: #BCEAD5\">\r\n      <div class=\"p-5\">\r\n        <i class=\"fa-solid fa-folder-open fa-9x mt-5 mb-3\" style=\"color: #8EC3B0;\"></i>\r\n        <figure>\r\n          <blockquote class=\"blockquote\">\r\n            <p> “Clutter is nothing more than postponed decisions.”</p>\r\n          </blockquote>\r\n          <figcaption class=\"blockquote-footer\">\r\n            <cite title=\"Source Title\">Barbara Hemphill</cite>\r\n          </figcaption>\r\n        </figure>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}